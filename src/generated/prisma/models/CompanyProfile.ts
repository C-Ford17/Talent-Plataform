
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CompanyProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CompanyProfile
 * 
 */
export type CompanyProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$CompanyProfilePayload>

export type AggregateCompanyProfile = {
  _count: CompanyProfileCountAggregateOutputType | null
  _min: CompanyProfileMinAggregateOutputType | null
  _max: CompanyProfileMaxAggregateOutputType | null
}

export type CompanyProfileMinAggregateOutputType = {
  id: string | null
  userId: string | null
  companyName: string | null
  description: string | null
  industry: string | null
  size: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CompanyProfileMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  companyName: string | null
  description: string | null
  industry: string | null
  size: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CompanyProfileCountAggregateOutputType = {
  id: number
  userId: number
  companyName: number
  description: number
  industry: number
  size: number
  website: number
  phone: number
  address: number
  city: number
  province: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CompanyProfileMinAggregateInputType = {
  id?: true
  userId?: true
  companyName?: true
  description?: true
  industry?: true
  size?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
}

export type CompanyProfileMaxAggregateInputType = {
  id?: true
  userId?: true
  companyName?: true
  description?: true
  industry?: true
  size?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
}

export type CompanyProfileCountAggregateInputType = {
  id?: true
  userId?: true
  companyName?: true
  description?: true
  industry?: true
  size?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CompanyProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompanyProfile to aggregate.
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompanyProfiles to fetch.
   */
  orderBy?: Prisma.CompanyProfileOrderByWithRelationInput | Prisma.CompanyProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CompanyProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompanyProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompanyProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CompanyProfiles
  **/
  _count?: true | CompanyProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CompanyProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CompanyProfileMaxAggregateInputType
}

export type GetCompanyProfileAggregateType<T extends CompanyProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateCompanyProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCompanyProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateCompanyProfile[P]>
}




export type CompanyProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompanyProfileWhereInput
  orderBy?: Prisma.CompanyProfileOrderByWithAggregationInput | Prisma.CompanyProfileOrderByWithAggregationInput[]
  by: Prisma.CompanyProfileScalarFieldEnum[] | Prisma.CompanyProfileScalarFieldEnum
  having?: Prisma.CompanyProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CompanyProfileCountAggregateInputType | true
  _min?: CompanyProfileMinAggregateInputType
  _max?: CompanyProfileMaxAggregateInputType
}

export type CompanyProfileGroupByOutputType = {
  id: string
  userId: string
  companyName: string
  description: string | null
  industry: string | null
  size: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date
  updatedAt: Date
  _count: CompanyProfileCountAggregateOutputType | null
  _min: CompanyProfileMinAggregateOutputType | null
  _max: CompanyProfileMaxAggregateOutputType | null
}

type GetCompanyProfileGroupByPayload<T extends CompanyProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CompanyProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CompanyProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CompanyProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CompanyProfileGroupByOutputType[P]>
      }
    >
  >



export type CompanyProfileWhereInput = {
  AND?: Prisma.CompanyProfileWhereInput | Prisma.CompanyProfileWhereInput[]
  OR?: Prisma.CompanyProfileWhereInput[]
  NOT?: Prisma.CompanyProfileWhereInput | Prisma.CompanyProfileWhereInput[]
  id?: Prisma.StringFilter<"CompanyProfile"> | string
  userId?: Prisma.StringFilter<"CompanyProfile"> | string
  companyName?: Prisma.StringFilter<"CompanyProfile"> | string
  description?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  industry?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  size?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  website?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  phone?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  address?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  city?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  province?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CompanyProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CompanyProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CompanyProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  industry?: Prisma.SortOrderInput | Prisma.SortOrder
  size?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type CompanyProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.CompanyProfileWhereInput | Prisma.CompanyProfileWhereInput[]
  OR?: Prisma.CompanyProfileWhereInput[]
  NOT?: Prisma.CompanyProfileWhereInput | Prisma.CompanyProfileWhereInput[]
  companyName?: Prisma.StringFilter<"CompanyProfile"> | string
  description?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  industry?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  size?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  website?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  phone?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  address?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  city?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  province?: Prisma.StringNullableFilter<"CompanyProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CompanyProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CompanyProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type CompanyProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  industry?: Prisma.SortOrderInput | Prisma.SortOrder
  size?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CompanyProfileCountOrderByAggregateInput
  _max?: Prisma.CompanyProfileMaxOrderByAggregateInput
  _min?: Prisma.CompanyProfileMinOrderByAggregateInput
}

export type CompanyProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.CompanyProfileScalarWhereWithAggregatesInput | Prisma.CompanyProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.CompanyProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CompanyProfileScalarWhereWithAggregatesInput | Prisma.CompanyProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CompanyProfile"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CompanyProfile"> | string
  companyName?: Prisma.StringWithAggregatesFilter<"CompanyProfile"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  industry?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  size?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  website?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  city?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  province?: Prisma.StringNullableWithAggregatesFilter<"CompanyProfile"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CompanyProfile"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CompanyProfile"> | Date | string
}

export type CompanyProfileCreateInput = {
  id?: string
  companyName: string
  description?: string | null
  industry?: string | null
  size?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCompanyProfileInput
}

export type CompanyProfileUncheckedCreateInput = {
  id?: string
  userId: string
  companyName: string
  description?: string | null
  industry?: string | null
  size?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompanyProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCompanyProfileNestedInput
}

export type CompanyProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompanyProfileCreateManyInput = {
  id?: string
  userId: string
  companyName: string
  description?: string | null
  industry?: string | null
  size?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompanyProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompanyProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompanyProfileNullableScalarRelationFilter = {
  is?: Prisma.CompanyProfileWhereInput | null
  isNot?: Prisma.CompanyProfileWhereInput | null
}

export type CompanyProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  size?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CompanyProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  size?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CompanyProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  size?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CompanyProfileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CompanyProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.CompanyProfileWhereUniqueInput
}

export type CompanyProfileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CompanyProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.CompanyProfileWhereUniqueInput
}

export type CompanyProfileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CompanyProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.CompanyProfileUpsertWithoutUserInput
  disconnect?: Prisma.CompanyProfileWhereInput | boolean
  delete?: Prisma.CompanyProfileWhereInput | boolean
  connect?: Prisma.CompanyProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompanyProfileUpdateToOneWithWhereWithoutUserInput, Prisma.CompanyProfileUpdateWithoutUserInput>, Prisma.CompanyProfileUncheckedUpdateWithoutUserInput>
}

export type CompanyProfileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CompanyProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.CompanyProfileUpsertWithoutUserInput
  disconnect?: Prisma.CompanyProfileWhereInput | boolean
  delete?: Prisma.CompanyProfileWhereInput | boolean
  connect?: Prisma.CompanyProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompanyProfileUpdateToOneWithWhereWithoutUserInput, Prisma.CompanyProfileUpdateWithoutUserInput>, Prisma.CompanyProfileUncheckedUpdateWithoutUserInput>
}

export type CompanyProfileCreateWithoutUserInput = {
  id?: string
  companyName: string
  description?: string | null
  industry?: string | null
  size?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompanyProfileUncheckedCreateWithoutUserInput = {
  id?: string
  companyName: string
  description?: string | null
  industry?: string | null
  size?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompanyProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.CompanyProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
}

export type CompanyProfileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.CompanyProfileUpdateWithoutUserInput, Prisma.CompanyProfileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CompanyProfileCreateWithoutUserInput, Prisma.CompanyProfileUncheckedCreateWithoutUserInput>
  where?: Prisma.CompanyProfileWhereInput
}

export type CompanyProfileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.CompanyProfileWhereInput
  data: Prisma.XOR<Prisma.CompanyProfileUpdateWithoutUserInput, Prisma.CompanyProfileUncheckedUpdateWithoutUserInput>
}

export type CompanyProfileUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompanyProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  industry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  size?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CompanyProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  companyName?: boolean
  description?: boolean
  industry?: boolean
  size?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["companyProfile"]>

export type CompanyProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  companyName?: boolean
  description?: boolean
  industry?: boolean
  size?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["companyProfile"]>

export type CompanyProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  companyName?: boolean
  description?: boolean
  industry?: boolean
  size?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["companyProfile"]>

export type CompanyProfileSelectScalar = {
  id?: boolean
  userId?: boolean
  companyName?: boolean
  description?: boolean
  industry?: boolean
  size?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CompanyProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "companyName" | "description" | "industry" | "size" | "website" | "phone" | "address" | "city" | "province" | "createdAt" | "updatedAt", ExtArgs["result"]["companyProfile"]>
export type CompanyProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CompanyProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CompanyProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CompanyProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CompanyProfile"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    companyName: string
    description: string | null
    industry: string | null
    size: string | null
    website: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["companyProfile"]>
  composites: {}
}

export type CompanyProfileGetPayload<S extends boolean | null | undefined | CompanyProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload, S>

export type CompanyProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CompanyProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CompanyProfileCountAggregateInputType | true
  }

export interface CompanyProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyProfile'], meta: { name: 'CompanyProfile' } }
  /**
   * Find zero or one CompanyProfile that matches the filter.
   * @param {CompanyProfileFindUniqueArgs} args - Arguments to find a CompanyProfile
   * @example
   * // Get one CompanyProfile
   * const companyProfile = await prisma.companyProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CompanyProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, CompanyProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CompanyProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CompanyProfileFindUniqueOrThrowArgs} args - Arguments to find a CompanyProfile
   * @example
   * // Get one CompanyProfile
   * const companyProfile = await prisma.companyProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CompanyProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CompanyProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompanyProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileFindFirstArgs} args - Arguments to find a CompanyProfile
   * @example
   * // Get one CompanyProfile
   * const companyProfile = await prisma.companyProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CompanyProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, CompanyProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompanyProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileFindFirstOrThrowArgs} args - Arguments to find a CompanyProfile
   * @example
   * // Get one CompanyProfile
   * const companyProfile = await prisma.companyProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CompanyProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CompanyProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CompanyProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CompanyProfiles
   * const companyProfiles = await prisma.companyProfile.findMany()
   * 
   * // Get first 10 CompanyProfiles
   * const companyProfiles = await prisma.companyProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const companyProfileWithIdOnly = await prisma.companyProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CompanyProfileFindManyArgs>(args?: Prisma.SelectSubset<T, CompanyProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CompanyProfile.
   * @param {CompanyProfileCreateArgs} args - Arguments to create a CompanyProfile.
   * @example
   * // Create one CompanyProfile
   * const CompanyProfile = await prisma.companyProfile.create({
   *   data: {
   *     // ... data to create a CompanyProfile
   *   }
   * })
   * 
   */
  create<T extends CompanyProfileCreateArgs>(args: Prisma.SelectSubset<T, CompanyProfileCreateArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CompanyProfiles.
   * @param {CompanyProfileCreateManyArgs} args - Arguments to create many CompanyProfiles.
   * @example
   * // Create many CompanyProfiles
   * const companyProfile = await prisma.companyProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CompanyProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, CompanyProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CompanyProfiles and returns the data saved in the database.
   * @param {CompanyProfileCreateManyAndReturnArgs} args - Arguments to create many CompanyProfiles.
   * @example
   * // Create many CompanyProfiles
   * const companyProfile = await prisma.companyProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CompanyProfiles and only return the `id`
   * const companyProfileWithIdOnly = await prisma.companyProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CompanyProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CompanyProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CompanyProfile.
   * @param {CompanyProfileDeleteArgs} args - Arguments to delete one CompanyProfile.
   * @example
   * // Delete one CompanyProfile
   * const CompanyProfile = await prisma.companyProfile.delete({
   *   where: {
   *     // ... filter to delete one CompanyProfile
   *   }
   * })
   * 
   */
  delete<T extends CompanyProfileDeleteArgs>(args: Prisma.SelectSubset<T, CompanyProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CompanyProfile.
   * @param {CompanyProfileUpdateArgs} args - Arguments to update one CompanyProfile.
   * @example
   * // Update one CompanyProfile
   * const companyProfile = await prisma.companyProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CompanyProfileUpdateArgs>(args: Prisma.SelectSubset<T, CompanyProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CompanyProfiles.
   * @param {CompanyProfileDeleteManyArgs} args - Arguments to filter CompanyProfiles to delete.
   * @example
   * // Delete a few CompanyProfiles
   * const { count } = await prisma.companyProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CompanyProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, CompanyProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompanyProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CompanyProfiles
   * const companyProfile = await prisma.companyProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CompanyProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, CompanyProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompanyProfiles and returns the data updated in the database.
   * @param {CompanyProfileUpdateManyAndReturnArgs} args - Arguments to update many CompanyProfiles.
   * @example
   * // Update many CompanyProfiles
   * const companyProfile = await prisma.companyProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CompanyProfiles and only return the `id`
   * const companyProfileWithIdOnly = await prisma.companyProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CompanyProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CompanyProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CompanyProfile.
   * @param {CompanyProfileUpsertArgs} args - Arguments to update or create a CompanyProfile.
   * @example
   * // Update or create a CompanyProfile
   * const companyProfile = await prisma.companyProfile.upsert({
   *   create: {
   *     // ... data to create a CompanyProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CompanyProfile we want to update
   *   }
   * })
   */
  upsert<T extends CompanyProfileUpsertArgs>(args: Prisma.SelectSubset<T, CompanyProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__CompanyProfileClient<runtime.Types.Result.GetResult<Prisma.$CompanyProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CompanyProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileCountArgs} args - Arguments to filter CompanyProfiles to count.
   * @example
   * // Count the number of CompanyProfiles
   * const count = await prisma.companyProfile.count({
   *   where: {
   *     // ... the filter for the CompanyProfiles we want to count
   *   }
   * })
  **/
  count<T extends CompanyProfileCountArgs>(
    args?: Prisma.Subset<T, CompanyProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CompanyProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CompanyProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CompanyProfileAggregateArgs>(args: Prisma.Subset<T, CompanyProfileAggregateArgs>): Prisma.PrismaPromise<GetCompanyProfileAggregateType<T>>

  /**
   * Group by CompanyProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompanyProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CompanyProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CompanyProfileGroupByArgs['orderBy'] }
      : { orderBy?: CompanyProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CompanyProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CompanyProfile model
 */
readonly fields: CompanyProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CompanyProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompanyProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CompanyProfile model
 */
export interface CompanyProfileFieldRefs {
  readonly id: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly userId: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly companyName: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly description: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly industry: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly size: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly website: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly phone: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly address: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly city: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly province: Prisma.FieldRef<"CompanyProfile", 'String'>
  readonly createdAt: Prisma.FieldRef<"CompanyProfile", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CompanyProfile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CompanyProfile findUnique
 */
export type CompanyProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter, which CompanyProfile to fetch.
   */
  where: Prisma.CompanyProfileWhereUniqueInput
}

/**
 * CompanyProfile findUniqueOrThrow
 */
export type CompanyProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter, which CompanyProfile to fetch.
   */
  where: Prisma.CompanyProfileWhereUniqueInput
}

/**
 * CompanyProfile findFirst
 */
export type CompanyProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter, which CompanyProfile to fetch.
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompanyProfiles to fetch.
   */
  orderBy?: Prisma.CompanyProfileOrderByWithRelationInput | Prisma.CompanyProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompanyProfiles.
   */
  cursor?: Prisma.CompanyProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompanyProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompanyProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompanyProfiles.
   */
  distinct?: Prisma.CompanyProfileScalarFieldEnum | Prisma.CompanyProfileScalarFieldEnum[]
}

/**
 * CompanyProfile findFirstOrThrow
 */
export type CompanyProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter, which CompanyProfile to fetch.
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompanyProfiles to fetch.
   */
  orderBy?: Prisma.CompanyProfileOrderByWithRelationInput | Prisma.CompanyProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompanyProfiles.
   */
  cursor?: Prisma.CompanyProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompanyProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompanyProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompanyProfiles.
   */
  distinct?: Prisma.CompanyProfileScalarFieldEnum | Prisma.CompanyProfileScalarFieldEnum[]
}

/**
 * CompanyProfile findMany
 */
export type CompanyProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter, which CompanyProfiles to fetch.
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompanyProfiles to fetch.
   */
  orderBy?: Prisma.CompanyProfileOrderByWithRelationInput | Prisma.CompanyProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CompanyProfiles.
   */
  cursor?: Prisma.CompanyProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompanyProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompanyProfiles.
   */
  skip?: number
  distinct?: Prisma.CompanyProfileScalarFieldEnum | Prisma.CompanyProfileScalarFieldEnum[]
}

/**
 * CompanyProfile create
 */
export type CompanyProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a CompanyProfile.
   */
  data: Prisma.XOR<Prisma.CompanyProfileCreateInput, Prisma.CompanyProfileUncheckedCreateInput>
}

/**
 * CompanyProfile createMany
 */
export type CompanyProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CompanyProfiles.
   */
  data: Prisma.CompanyProfileCreateManyInput | Prisma.CompanyProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CompanyProfile createManyAndReturn
 */
export type CompanyProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * The data used to create many CompanyProfiles.
   */
  data: Prisma.CompanyProfileCreateManyInput | Prisma.CompanyProfileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CompanyProfile update
 */
export type CompanyProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a CompanyProfile.
   */
  data: Prisma.XOR<Prisma.CompanyProfileUpdateInput, Prisma.CompanyProfileUncheckedUpdateInput>
  /**
   * Choose, which CompanyProfile to update.
   */
  where: Prisma.CompanyProfileWhereUniqueInput
}

/**
 * CompanyProfile updateMany
 */
export type CompanyProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CompanyProfiles.
   */
  data: Prisma.XOR<Prisma.CompanyProfileUpdateManyMutationInput, Prisma.CompanyProfileUncheckedUpdateManyInput>
  /**
   * Filter which CompanyProfiles to update
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * Limit how many CompanyProfiles to update.
   */
  limit?: number
}

/**
 * CompanyProfile updateManyAndReturn
 */
export type CompanyProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * The data used to update CompanyProfiles.
   */
  data: Prisma.XOR<Prisma.CompanyProfileUpdateManyMutationInput, Prisma.CompanyProfileUncheckedUpdateManyInput>
  /**
   * Filter which CompanyProfiles to update
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * Limit how many CompanyProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CompanyProfile upsert
 */
export type CompanyProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the CompanyProfile to update in case it exists.
   */
  where: Prisma.CompanyProfileWhereUniqueInput
  /**
   * In case the CompanyProfile found by the `where` argument doesn't exist, create a new CompanyProfile with this data.
   */
  create: Prisma.XOR<Prisma.CompanyProfileCreateInput, Prisma.CompanyProfileUncheckedCreateInput>
  /**
   * In case the CompanyProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CompanyProfileUpdateInput, Prisma.CompanyProfileUncheckedUpdateInput>
}

/**
 * CompanyProfile delete
 */
export type CompanyProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
  /**
   * Filter which CompanyProfile to delete.
   */
  where: Prisma.CompanyProfileWhereUniqueInput
}

/**
 * CompanyProfile deleteMany
 */
export type CompanyProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompanyProfiles to delete
   */
  where?: Prisma.CompanyProfileWhereInput
  /**
   * Limit how many CompanyProfiles to delete.
   */
  limit?: number
}

/**
 * CompanyProfile without action
 */
export type CompanyProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompanyProfile
   */
  select?: Prisma.CompanyProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompanyProfile
   */
  omit?: Prisma.CompanyProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyProfileInclude<ExtArgs> | null
}
