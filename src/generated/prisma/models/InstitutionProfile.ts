
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `InstitutionProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InstitutionProfile
 * 
 */
export type InstitutionProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$InstitutionProfilePayload>

export type AggregateInstitutionProfile = {
  _count: InstitutionProfileCountAggregateOutputType | null
  _min: InstitutionProfileMinAggregateOutputType | null
  _max: InstitutionProfileMaxAggregateOutputType | null
}

export type InstitutionProfileMinAggregateOutputType = {
  id: string | null
  userId: string | null
  institutionName: string | null
  description: string | null
  institutionType: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InstitutionProfileMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  institutionName: string | null
  description: string | null
  institutionType: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InstitutionProfileCountAggregateOutputType = {
  id: number
  userId: number
  institutionName: number
  description: number
  institutionType: number
  website: number
  phone: number
  address: number
  city: number
  province: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InstitutionProfileMinAggregateInputType = {
  id?: true
  userId?: true
  institutionName?: true
  description?: true
  institutionType?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
}

export type InstitutionProfileMaxAggregateInputType = {
  id?: true
  userId?: true
  institutionName?: true
  description?: true
  institutionType?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
}

export type InstitutionProfileCountAggregateInputType = {
  id?: true
  userId?: true
  institutionName?: true
  description?: true
  institutionType?: true
  website?: true
  phone?: true
  address?: true
  city?: true
  province?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InstitutionProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstitutionProfile to aggregate.
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstitutionProfiles to fetch.
   */
  orderBy?: Prisma.InstitutionProfileOrderByWithRelationInput | Prisma.InstitutionProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InstitutionProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstitutionProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstitutionProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InstitutionProfiles
  **/
  _count?: true | InstitutionProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InstitutionProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InstitutionProfileMaxAggregateInputType
}

export type GetInstitutionProfileAggregateType<T extends InstitutionProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateInstitutionProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInstitutionProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateInstitutionProfile[P]>
}




export type InstitutionProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InstitutionProfileWhereInput
  orderBy?: Prisma.InstitutionProfileOrderByWithAggregationInput | Prisma.InstitutionProfileOrderByWithAggregationInput[]
  by: Prisma.InstitutionProfileScalarFieldEnum[] | Prisma.InstitutionProfileScalarFieldEnum
  having?: Prisma.InstitutionProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InstitutionProfileCountAggregateInputType | true
  _min?: InstitutionProfileMinAggregateInputType
  _max?: InstitutionProfileMaxAggregateInputType
}

export type InstitutionProfileGroupByOutputType = {
  id: string
  userId: string
  institutionName: string
  description: string | null
  institutionType: string | null
  website: string | null
  phone: string | null
  address: string | null
  city: string | null
  province: string | null
  createdAt: Date
  updatedAt: Date
  _count: InstitutionProfileCountAggregateOutputType | null
  _min: InstitutionProfileMinAggregateOutputType | null
  _max: InstitutionProfileMaxAggregateOutputType | null
}

type GetInstitutionProfileGroupByPayload<T extends InstitutionProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InstitutionProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InstitutionProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InstitutionProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InstitutionProfileGroupByOutputType[P]>
      }
    >
  >



export type InstitutionProfileWhereInput = {
  AND?: Prisma.InstitutionProfileWhereInput | Prisma.InstitutionProfileWhereInput[]
  OR?: Prisma.InstitutionProfileWhereInput[]
  NOT?: Prisma.InstitutionProfileWhereInput | Prisma.InstitutionProfileWhereInput[]
  id?: Prisma.StringFilter<"InstitutionProfile"> | string
  userId?: Prisma.StringFilter<"InstitutionProfile"> | string
  institutionName?: Prisma.StringFilter<"InstitutionProfile"> | string
  description?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  institutionType?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  website?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  phone?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  address?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  city?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  province?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InstitutionProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InstitutionProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type InstitutionProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  institutionName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  institutionType?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type InstitutionProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.InstitutionProfileWhereInput | Prisma.InstitutionProfileWhereInput[]
  OR?: Prisma.InstitutionProfileWhereInput[]
  NOT?: Prisma.InstitutionProfileWhereInput | Prisma.InstitutionProfileWhereInput[]
  institutionName?: Prisma.StringFilter<"InstitutionProfile"> | string
  description?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  institutionType?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  website?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  phone?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  address?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  city?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  province?: Prisma.StringNullableFilter<"InstitutionProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InstitutionProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InstitutionProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type InstitutionProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  institutionName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  institutionType?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InstitutionProfileCountOrderByAggregateInput
  _max?: Prisma.InstitutionProfileMaxOrderByAggregateInput
  _min?: Prisma.InstitutionProfileMinOrderByAggregateInput
}

export type InstitutionProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.InstitutionProfileScalarWhereWithAggregatesInput | Prisma.InstitutionProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.InstitutionProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InstitutionProfileScalarWhereWithAggregatesInput | Prisma.InstitutionProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"InstitutionProfile"> | string
  userId?: Prisma.StringWithAggregatesFilter<"InstitutionProfile"> | string
  institutionName?: Prisma.StringWithAggregatesFilter<"InstitutionProfile"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  institutionType?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  website?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  city?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  province?: Prisma.StringNullableWithAggregatesFilter<"InstitutionProfile"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InstitutionProfile"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InstitutionProfile"> | Date | string
}

export type InstitutionProfileCreateInput = {
  id?: string
  institutionName: string
  description?: string | null
  institutionType?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutInstitutionProfileInput
}

export type InstitutionProfileUncheckedCreateInput = {
  id?: string
  userId: string
  institutionName: string
  description?: string | null
  institutionType?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstitutionProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutInstitutionProfileNestedInput
}

export type InstitutionProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstitutionProfileCreateManyInput = {
  id?: string
  userId: string
  institutionName: string
  description?: string | null
  institutionType?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstitutionProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstitutionProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstitutionProfileNullableScalarRelationFilter = {
  is?: Prisma.InstitutionProfileWhereInput | null
  isNot?: Prisma.InstitutionProfileWhereInput | null
}

export type InstitutionProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  institutionName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  institutionType?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstitutionProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  institutionName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  institutionType?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstitutionProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  institutionName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  institutionType?: Prisma.SortOrder
  website?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstitutionProfileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.InstitutionProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.InstitutionProfileWhereUniqueInput
}

export type InstitutionProfileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.InstitutionProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.InstitutionProfileWhereUniqueInput
}

export type InstitutionProfileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.InstitutionProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.InstitutionProfileUpsertWithoutUserInput
  disconnect?: Prisma.InstitutionProfileWhereInput | boolean
  delete?: Prisma.InstitutionProfileWhereInput | boolean
  connect?: Prisma.InstitutionProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstitutionProfileUpdateToOneWithWhereWithoutUserInput, Prisma.InstitutionProfileUpdateWithoutUserInput>, Prisma.InstitutionProfileUncheckedUpdateWithoutUserInput>
}

export type InstitutionProfileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.InstitutionProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.InstitutionProfileUpsertWithoutUserInput
  disconnect?: Prisma.InstitutionProfileWhereInput | boolean
  delete?: Prisma.InstitutionProfileWhereInput | boolean
  connect?: Prisma.InstitutionProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstitutionProfileUpdateToOneWithWhereWithoutUserInput, Prisma.InstitutionProfileUpdateWithoutUserInput>, Prisma.InstitutionProfileUncheckedUpdateWithoutUserInput>
}

export type InstitutionProfileCreateWithoutUserInput = {
  id?: string
  institutionName: string
  description?: string | null
  institutionType?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstitutionProfileUncheckedCreateWithoutUserInput = {
  id?: string
  institutionName: string
  description?: string | null
  institutionType?: string | null
  website?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  province?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstitutionProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.InstitutionProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
}

export type InstitutionProfileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.InstitutionProfileUpdateWithoutUserInput, Prisma.InstitutionProfileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.InstitutionProfileCreateWithoutUserInput, Prisma.InstitutionProfileUncheckedCreateWithoutUserInput>
  where?: Prisma.InstitutionProfileWhereInput
}

export type InstitutionProfileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.InstitutionProfileWhereInput
  data: Prisma.XOR<Prisma.InstitutionProfileUpdateWithoutUserInput, Prisma.InstitutionProfileUncheckedUpdateWithoutUserInput>
}

export type InstitutionProfileUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstitutionProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  institutionName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institutionType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InstitutionProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  institutionName?: boolean
  description?: boolean
  institutionType?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["institutionProfile"]>

export type InstitutionProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  institutionName?: boolean
  description?: boolean
  institutionType?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["institutionProfile"]>

export type InstitutionProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  institutionName?: boolean
  description?: boolean
  institutionType?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["institutionProfile"]>

export type InstitutionProfileSelectScalar = {
  id?: boolean
  userId?: boolean
  institutionName?: boolean
  description?: boolean
  institutionType?: boolean
  website?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InstitutionProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "institutionName" | "description" | "institutionType" | "website" | "phone" | "address" | "city" | "province" | "createdAt" | "updatedAt", ExtArgs["result"]["institutionProfile"]>
export type InstitutionProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type InstitutionProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type InstitutionProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $InstitutionProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InstitutionProfile"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    institutionName: string
    description: string | null
    institutionType: string | null
    website: string | null
    phone: string | null
    address: string | null
    city: string | null
    province: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["institutionProfile"]>
  composites: {}
}

export type InstitutionProfileGetPayload<S extends boolean | null | undefined | InstitutionProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload, S>

export type InstitutionProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InstitutionProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InstitutionProfileCountAggregateInputType | true
  }

export interface InstitutionProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstitutionProfile'], meta: { name: 'InstitutionProfile' } }
  /**
   * Find zero or one InstitutionProfile that matches the filter.
   * @param {InstitutionProfileFindUniqueArgs} args - Arguments to find a InstitutionProfile
   * @example
   * // Get one InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InstitutionProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, InstitutionProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InstitutionProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InstitutionProfileFindUniqueOrThrowArgs} args - Arguments to find a InstitutionProfile
   * @example
   * // Get one InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InstitutionProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InstitutionProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstitutionProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileFindFirstArgs} args - Arguments to find a InstitutionProfile
   * @example
   * // Get one InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InstitutionProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstitutionProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileFindFirstOrThrowArgs} args - Arguments to find a InstitutionProfile
   * @example
   * // Get one InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InstitutionProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InstitutionProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InstitutionProfiles
   * const institutionProfiles = await prisma.institutionProfile.findMany()
   * 
   * // Get first 10 InstitutionProfiles
   * const institutionProfiles = await prisma.institutionProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const institutionProfileWithIdOnly = await prisma.institutionProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InstitutionProfileFindManyArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InstitutionProfile.
   * @param {InstitutionProfileCreateArgs} args - Arguments to create a InstitutionProfile.
   * @example
   * // Create one InstitutionProfile
   * const InstitutionProfile = await prisma.institutionProfile.create({
   *   data: {
   *     // ... data to create a InstitutionProfile
   *   }
   * })
   * 
   */
  create<T extends InstitutionProfileCreateArgs>(args: Prisma.SelectSubset<T, InstitutionProfileCreateArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InstitutionProfiles.
   * @param {InstitutionProfileCreateManyArgs} args - Arguments to create many InstitutionProfiles.
   * @example
   * // Create many InstitutionProfiles
   * const institutionProfile = await prisma.institutionProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InstitutionProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InstitutionProfiles and returns the data saved in the database.
   * @param {InstitutionProfileCreateManyAndReturnArgs} args - Arguments to create many InstitutionProfiles.
   * @example
   * // Create many InstitutionProfiles
   * const institutionProfile = await prisma.institutionProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InstitutionProfiles and only return the `id`
   * const institutionProfileWithIdOnly = await prisma.institutionProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InstitutionProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InstitutionProfile.
   * @param {InstitutionProfileDeleteArgs} args - Arguments to delete one InstitutionProfile.
   * @example
   * // Delete one InstitutionProfile
   * const InstitutionProfile = await prisma.institutionProfile.delete({
   *   where: {
   *     // ... filter to delete one InstitutionProfile
   *   }
   * })
   * 
   */
  delete<T extends InstitutionProfileDeleteArgs>(args: Prisma.SelectSubset<T, InstitutionProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InstitutionProfile.
   * @param {InstitutionProfileUpdateArgs} args - Arguments to update one InstitutionProfile.
   * @example
   * // Update one InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InstitutionProfileUpdateArgs>(args: Prisma.SelectSubset<T, InstitutionProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InstitutionProfiles.
   * @param {InstitutionProfileDeleteManyArgs} args - Arguments to filter InstitutionProfiles to delete.
   * @example
   * // Delete a few InstitutionProfiles
   * const { count } = await prisma.institutionProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InstitutionProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, InstitutionProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstitutionProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InstitutionProfiles
   * const institutionProfile = await prisma.institutionProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InstitutionProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, InstitutionProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstitutionProfiles and returns the data updated in the database.
   * @param {InstitutionProfileUpdateManyAndReturnArgs} args - Arguments to update many InstitutionProfiles.
   * @example
   * // Update many InstitutionProfiles
   * const institutionProfile = await prisma.institutionProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InstitutionProfiles and only return the `id`
   * const institutionProfileWithIdOnly = await prisma.institutionProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InstitutionProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InstitutionProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InstitutionProfile.
   * @param {InstitutionProfileUpsertArgs} args - Arguments to update or create a InstitutionProfile.
   * @example
   * // Update or create a InstitutionProfile
   * const institutionProfile = await prisma.institutionProfile.upsert({
   *   create: {
   *     // ... data to create a InstitutionProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InstitutionProfile we want to update
   *   }
   * })
   */
  upsert<T extends InstitutionProfileUpsertArgs>(args: Prisma.SelectSubset<T, InstitutionProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__InstitutionProfileClient<runtime.Types.Result.GetResult<Prisma.$InstitutionProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InstitutionProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileCountArgs} args - Arguments to filter InstitutionProfiles to count.
   * @example
   * // Count the number of InstitutionProfiles
   * const count = await prisma.institutionProfile.count({
   *   where: {
   *     // ... the filter for the InstitutionProfiles we want to count
   *   }
   * })
  **/
  count<T extends InstitutionProfileCountArgs>(
    args?: Prisma.Subset<T, InstitutionProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InstitutionProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InstitutionProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InstitutionProfileAggregateArgs>(args: Prisma.Subset<T, InstitutionProfileAggregateArgs>): Prisma.PrismaPromise<GetInstitutionProfileAggregateType<T>>

  /**
   * Group by InstitutionProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstitutionProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InstitutionProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InstitutionProfileGroupByArgs['orderBy'] }
      : { orderBy?: InstitutionProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InstitutionProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InstitutionProfile model
 */
readonly fields: InstitutionProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InstitutionProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InstitutionProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InstitutionProfile model
 */
export interface InstitutionProfileFieldRefs {
  readonly id: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly userId: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly institutionName: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly description: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly institutionType: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly website: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly phone: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly address: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly city: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly province: Prisma.FieldRef<"InstitutionProfile", 'String'>
  readonly createdAt: Prisma.FieldRef<"InstitutionProfile", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InstitutionProfile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InstitutionProfile findUnique
 */
export type InstitutionProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter, which InstitutionProfile to fetch.
   */
  where: Prisma.InstitutionProfileWhereUniqueInput
}

/**
 * InstitutionProfile findUniqueOrThrow
 */
export type InstitutionProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter, which InstitutionProfile to fetch.
   */
  where: Prisma.InstitutionProfileWhereUniqueInput
}

/**
 * InstitutionProfile findFirst
 */
export type InstitutionProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter, which InstitutionProfile to fetch.
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstitutionProfiles to fetch.
   */
  orderBy?: Prisma.InstitutionProfileOrderByWithRelationInput | Prisma.InstitutionProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstitutionProfiles.
   */
  cursor?: Prisma.InstitutionProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstitutionProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstitutionProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstitutionProfiles.
   */
  distinct?: Prisma.InstitutionProfileScalarFieldEnum | Prisma.InstitutionProfileScalarFieldEnum[]
}

/**
 * InstitutionProfile findFirstOrThrow
 */
export type InstitutionProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter, which InstitutionProfile to fetch.
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstitutionProfiles to fetch.
   */
  orderBy?: Prisma.InstitutionProfileOrderByWithRelationInput | Prisma.InstitutionProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstitutionProfiles.
   */
  cursor?: Prisma.InstitutionProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstitutionProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstitutionProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstitutionProfiles.
   */
  distinct?: Prisma.InstitutionProfileScalarFieldEnum | Prisma.InstitutionProfileScalarFieldEnum[]
}

/**
 * InstitutionProfile findMany
 */
export type InstitutionProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter, which InstitutionProfiles to fetch.
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstitutionProfiles to fetch.
   */
  orderBy?: Prisma.InstitutionProfileOrderByWithRelationInput | Prisma.InstitutionProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InstitutionProfiles.
   */
  cursor?: Prisma.InstitutionProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstitutionProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstitutionProfiles.
   */
  skip?: number
  distinct?: Prisma.InstitutionProfileScalarFieldEnum | Prisma.InstitutionProfileScalarFieldEnum[]
}

/**
 * InstitutionProfile create
 */
export type InstitutionProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a InstitutionProfile.
   */
  data: Prisma.XOR<Prisma.InstitutionProfileCreateInput, Prisma.InstitutionProfileUncheckedCreateInput>
}

/**
 * InstitutionProfile createMany
 */
export type InstitutionProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InstitutionProfiles.
   */
  data: Prisma.InstitutionProfileCreateManyInput | Prisma.InstitutionProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InstitutionProfile createManyAndReturn
 */
export type InstitutionProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * The data used to create many InstitutionProfiles.
   */
  data: Prisma.InstitutionProfileCreateManyInput | Prisma.InstitutionProfileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InstitutionProfile update
 */
export type InstitutionProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a InstitutionProfile.
   */
  data: Prisma.XOR<Prisma.InstitutionProfileUpdateInput, Prisma.InstitutionProfileUncheckedUpdateInput>
  /**
   * Choose, which InstitutionProfile to update.
   */
  where: Prisma.InstitutionProfileWhereUniqueInput
}

/**
 * InstitutionProfile updateMany
 */
export type InstitutionProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InstitutionProfiles.
   */
  data: Prisma.XOR<Prisma.InstitutionProfileUpdateManyMutationInput, Prisma.InstitutionProfileUncheckedUpdateManyInput>
  /**
   * Filter which InstitutionProfiles to update
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * Limit how many InstitutionProfiles to update.
   */
  limit?: number
}

/**
 * InstitutionProfile updateManyAndReturn
 */
export type InstitutionProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * The data used to update InstitutionProfiles.
   */
  data: Prisma.XOR<Prisma.InstitutionProfileUpdateManyMutationInput, Prisma.InstitutionProfileUncheckedUpdateManyInput>
  /**
   * Filter which InstitutionProfiles to update
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * Limit how many InstitutionProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InstitutionProfile upsert
 */
export type InstitutionProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the InstitutionProfile to update in case it exists.
   */
  where: Prisma.InstitutionProfileWhereUniqueInput
  /**
   * In case the InstitutionProfile found by the `where` argument doesn't exist, create a new InstitutionProfile with this data.
   */
  create: Prisma.XOR<Prisma.InstitutionProfileCreateInput, Prisma.InstitutionProfileUncheckedCreateInput>
  /**
   * In case the InstitutionProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InstitutionProfileUpdateInput, Prisma.InstitutionProfileUncheckedUpdateInput>
}

/**
 * InstitutionProfile delete
 */
export type InstitutionProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
  /**
   * Filter which InstitutionProfile to delete.
   */
  where: Prisma.InstitutionProfileWhereUniqueInput
}

/**
 * InstitutionProfile deleteMany
 */
export type InstitutionProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstitutionProfiles to delete
   */
  where?: Prisma.InstitutionProfileWhereInput
  /**
   * Limit how many InstitutionProfiles to delete.
   */
  limit?: number
}

/**
 * InstitutionProfile without action
 */
export type InstitutionProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstitutionProfile
   */
  select?: Prisma.InstitutionProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstitutionProfile
   */
  omit?: Prisma.InstitutionProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstitutionProfileInclude<ExtArgs> | null
}
