
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Experience` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Experience
 * 
 */
export type ExperienceModel = runtime.Types.Result.DefaultSelection<Prisma.$ExperiencePayload>

export type AggregateExperience = {
  _count: ExperienceCountAggregateOutputType | null
  _min: ExperienceMinAggregateOutputType | null
  _max: ExperienceMaxAggregateOutputType | null
}

export type ExperienceMinAggregateOutputType = {
  id: string | null
  citizenId: string | null
  company: string | null
  position: string | null
  startDate: Date | null
  endDate: Date | null
  current: boolean | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExperienceMaxAggregateOutputType = {
  id: string | null
  citizenId: string | null
  company: string | null
  position: string | null
  startDate: Date | null
  endDate: Date | null
  current: boolean | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExperienceCountAggregateOutputType = {
  id: number
  citizenId: number
  company: number
  position: number
  startDate: number
  endDate: number
  current: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExperienceMinAggregateInputType = {
  id?: true
  citizenId?: true
  company?: true
  position?: true
  startDate?: true
  endDate?: true
  current?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ExperienceMaxAggregateInputType = {
  id?: true
  citizenId?: true
  company?: true
  position?: true
  startDate?: true
  endDate?: true
  current?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ExperienceCountAggregateInputType = {
  id?: true
  citizenId?: true
  company?: true
  position?: true
  startDate?: true
  endDate?: true
  current?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExperienceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Experience to aggregate.
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperienceOrderByWithRelationInput | Prisma.ExperienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExperienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Experiences
  **/
  _count?: true | ExperienceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExperienceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExperienceMaxAggregateInputType
}

export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
      [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExperience[P]>
    : Prisma.GetScalarType<T[P], AggregateExperience[P]>
}




export type ExperienceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExperienceWhereInput
  orderBy?: Prisma.ExperienceOrderByWithAggregationInput | Prisma.ExperienceOrderByWithAggregationInput[]
  by: Prisma.ExperienceScalarFieldEnum[] | Prisma.ExperienceScalarFieldEnum
  having?: Prisma.ExperienceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExperienceCountAggregateInputType | true
  _min?: ExperienceMinAggregateInputType
  _max?: ExperienceMaxAggregateInputType
}

export type ExperienceGroupByOutputType = {
  id: string
  citizenId: string
  company: string
  position: string
  startDate: Date
  endDate: Date | null
  current: boolean
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: ExperienceCountAggregateOutputType | null
  _min: ExperienceMinAggregateOutputType | null
  _max: ExperienceMaxAggregateOutputType | null
}

type GetExperienceGroupByPayload<T extends ExperienceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExperienceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExperienceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExperienceGroupByOutputType[P]>
      }
    >
  >



export type ExperienceWhereInput = {
  AND?: Prisma.ExperienceWhereInput | Prisma.ExperienceWhereInput[]
  OR?: Prisma.ExperienceWhereInput[]
  NOT?: Prisma.ExperienceWhereInput | Prisma.ExperienceWhereInput[]
  id?: Prisma.StringFilter<"Experience"> | string
  citizenId?: Prisma.StringFilter<"Experience"> | string
  company?: Prisma.StringFilter<"Experience"> | string
  position?: Prisma.StringFilter<"Experience"> | string
  startDate?: Prisma.DateTimeFilter<"Experience"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Experience"> | Date | string | null
  current?: Prisma.BoolFilter<"Experience"> | boolean
  description?: Prisma.StringNullableFilter<"Experience"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
}

export type ExperienceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  company?: Prisma.SortOrder
  position?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  current?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  citizen?: Prisma.CitizenProfileOrderByWithRelationInput
}

export type ExperienceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExperienceWhereInput | Prisma.ExperienceWhereInput[]
  OR?: Prisma.ExperienceWhereInput[]
  NOT?: Prisma.ExperienceWhereInput | Prisma.ExperienceWhereInput[]
  citizenId?: Prisma.StringFilter<"Experience"> | string
  company?: Prisma.StringFilter<"Experience"> | string
  position?: Prisma.StringFilter<"Experience"> | string
  startDate?: Prisma.DateTimeFilter<"Experience"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Experience"> | Date | string | null
  current?: Prisma.BoolFilter<"Experience"> | boolean
  description?: Prisma.StringNullableFilter<"Experience"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
}, "id">

export type ExperienceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  company?: Prisma.SortOrder
  position?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  current?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExperienceCountOrderByAggregateInput
  _max?: Prisma.ExperienceMaxOrderByAggregateInput
  _min?: Prisma.ExperienceMinOrderByAggregateInput
}

export type ExperienceScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExperienceScalarWhereWithAggregatesInput | Prisma.ExperienceScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExperienceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExperienceScalarWhereWithAggregatesInput | Prisma.ExperienceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Experience"> | string
  citizenId?: Prisma.StringWithAggregatesFilter<"Experience"> | string
  company?: Prisma.StringWithAggregatesFilter<"Experience"> | string
  position?: Prisma.StringWithAggregatesFilter<"Experience"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Experience"> | Date | string
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Experience"> | Date | string | null
  current?: Prisma.BoolWithAggregatesFilter<"Experience"> | boolean
  description?: Prisma.StringNullableWithAggregatesFilter<"Experience"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Experience"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Experience"> | Date | string
}

export type ExperienceCreateInput = {
  id?: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  citizen: Prisma.CitizenProfileCreateNestedOneWithoutExperienceInput
}

export type ExperienceUncheckedCreateInput = {
  id?: string
  citizenId: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  citizen?: Prisma.CitizenProfileUpdateOneRequiredWithoutExperienceNestedInput
}

export type ExperienceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceCreateManyInput = {
  id?: string
  citizenId: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceListRelationFilter = {
  every?: Prisma.ExperienceWhereInput
  some?: Prisma.ExperienceWhereInput
  none?: Prisma.ExperienceWhereInput
}

export type ExperienceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExperienceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  company?: Prisma.SortOrder
  position?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  current?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  company?: Prisma.SortOrder
  position?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  current?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  company?: Prisma.SortOrder
  position?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  current?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExperienceCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput> | Prisma.ExperienceCreateWithoutCitizenInput[] | Prisma.ExperienceUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.ExperienceCreateOrConnectWithoutCitizenInput | Prisma.ExperienceCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.ExperienceCreateManyCitizenInputEnvelope
  connect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
}

export type ExperienceUncheckedCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput> | Prisma.ExperienceCreateWithoutCitizenInput[] | Prisma.ExperienceUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.ExperienceCreateOrConnectWithoutCitizenInput | Prisma.ExperienceCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.ExperienceCreateManyCitizenInputEnvelope
  connect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
}

export type ExperienceUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput> | Prisma.ExperienceCreateWithoutCitizenInput[] | Prisma.ExperienceUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.ExperienceCreateOrConnectWithoutCitizenInput | Prisma.ExperienceCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.ExperienceUpsertWithWhereUniqueWithoutCitizenInput | Prisma.ExperienceUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.ExperienceCreateManyCitizenInputEnvelope
  set?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  disconnect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  delete?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  connect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  update?: Prisma.ExperienceUpdateWithWhereUniqueWithoutCitizenInput | Prisma.ExperienceUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.ExperienceUpdateManyWithWhereWithoutCitizenInput | Prisma.ExperienceUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.ExperienceScalarWhereInput | Prisma.ExperienceScalarWhereInput[]
}

export type ExperienceUncheckedUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput> | Prisma.ExperienceCreateWithoutCitizenInput[] | Prisma.ExperienceUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.ExperienceCreateOrConnectWithoutCitizenInput | Prisma.ExperienceCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.ExperienceUpsertWithWhereUniqueWithoutCitizenInput | Prisma.ExperienceUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.ExperienceCreateManyCitizenInputEnvelope
  set?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  disconnect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  delete?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  connect?: Prisma.ExperienceWhereUniqueInput | Prisma.ExperienceWhereUniqueInput[]
  update?: Prisma.ExperienceUpdateWithWhereUniqueWithoutCitizenInput | Prisma.ExperienceUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.ExperienceUpdateManyWithWhereWithoutCitizenInput | Prisma.ExperienceUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.ExperienceScalarWhereInput | Prisma.ExperienceScalarWhereInput[]
}

export type ExperienceCreateWithoutCitizenInput = {
  id?: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceUncheckedCreateWithoutCitizenInput = {
  id?: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceCreateOrConnectWithoutCitizenInput = {
  where: Prisma.ExperienceWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput>
}

export type ExperienceCreateManyCitizenInputEnvelope = {
  data: Prisma.ExperienceCreateManyCitizenInput | Prisma.ExperienceCreateManyCitizenInput[]
  skipDuplicates?: boolean
}

export type ExperienceUpsertWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.ExperienceWhereUniqueInput
  update: Prisma.XOR<Prisma.ExperienceUpdateWithoutCitizenInput, Prisma.ExperienceUncheckedUpdateWithoutCitizenInput>
  create: Prisma.XOR<Prisma.ExperienceCreateWithoutCitizenInput, Prisma.ExperienceUncheckedCreateWithoutCitizenInput>
}

export type ExperienceUpdateWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.ExperienceWhereUniqueInput
  data: Prisma.XOR<Prisma.ExperienceUpdateWithoutCitizenInput, Prisma.ExperienceUncheckedUpdateWithoutCitizenInput>
}

export type ExperienceUpdateManyWithWhereWithoutCitizenInput = {
  where: Prisma.ExperienceScalarWhereInput
  data: Prisma.XOR<Prisma.ExperienceUpdateManyMutationInput, Prisma.ExperienceUncheckedUpdateManyWithoutCitizenInput>
}

export type ExperienceScalarWhereInput = {
  AND?: Prisma.ExperienceScalarWhereInput | Prisma.ExperienceScalarWhereInput[]
  OR?: Prisma.ExperienceScalarWhereInput[]
  NOT?: Prisma.ExperienceScalarWhereInput | Prisma.ExperienceScalarWhereInput[]
  id?: Prisma.StringFilter<"Experience"> | string
  citizenId?: Prisma.StringFilter<"Experience"> | string
  company?: Prisma.StringFilter<"Experience"> | string
  position?: Prisma.StringFilter<"Experience"> | string
  startDate?: Prisma.DateTimeFilter<"Experience"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Experience"> | Date | string | null
  current?: Prisma.BoolFilter<"Experience"> | boolean
  description?: Prisma.StringNullableFilter<"Experience"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Experience"> | Date | string
}

export type ExperienceCreateManyCitizenInput = {
  id?: string
  company: string
  position: string
  startDate: Date | string
  endDate?: Date | string | null
  current?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExperienceUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceUncheckedUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExperienceUncheckedUpdateManyWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  current?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExperienceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  company?: boolean
  position?: boolean
  startDate?: boolean
  endDate?: boolean
  current?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experience"]>

export type ExperienceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  company?: boolean
  position?: boolean
  startDate?: boolean
  endDate?: boolean
  current?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experience"]>

export type ExperienceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  company?: boolean
  position?: boolean
  startDate?: boolean
  endDate?: boolean
  current?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experience"]>

export type ExperienceSelectScalar = {
  id?: boolean
  citizenId?: boolean
  company?: boolean
  position?: boolean
  startDate?: boolean
  endDate?: boolean
  current?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExperienceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "citizenId" | "company" | "position" | "startDate" | "endDate" | "current" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["experience"]>
export type ExperienceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}
export type ExperienceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}
export type ExperienceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}

export type $ExperiencePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Experience"
  objects: {
    citizen: Prisma.$CitizenProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    citizenId: string
    company: string
    position: string
    startDate: Date
    endDate: Date | null
    current: boolean
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["experience"]>
  composites: {}
}

export type ExperienceGetPayload<S extends boolean | null | undefined | ExperienceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExperiencePayload, S>

export type ExperienceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExperienceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExperienceCountAggregateInputType | true
  }

export interface ExperienceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experience'], meta: { name: 'Experience' } }
  /**
   * Find zero or one Experience that matches the filter.
   * @param {ExperienceFindUniqueArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExperienceFindUniqueArgs>(args: Prisma.SelectSubset<T, ExperienceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Experience that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExperienceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExperienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experience that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceFindFirstArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExperienceFindFirstArgs>(args?: Prisma.SelectSubset<T, ExperienceFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experience that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceFindFirstOrThrowArgs} args - Arguments to find a Experience
   * @example
   * // Get one Experience
   * const experience = await prisma.experience.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExperienceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExperienceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Experiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Experiences
   * const experiences = await prisma.experience.findMany()
   * 
   * // Get first 10 Experiences
   * const experiences = await prisma.experience.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExperienceFindManyArgs>(args?: Prisma.SelectSubset<T, ExperienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Experience.
   * @param {ExperienceCreateArgs} args - Arguments to create a Experience.
   * @example
   * // Create one Experience
   * const Experience = await prisma.experience.create({
   *   data: {
   *     // ... data to create a Experience
   *   }
   * })
   * 
   */
  create<T extends ExperienceCreateArgs>(args: Prisma.SelectSubset<T, ExperienceCreateArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Experiences.
   * @param {ExperienceCreateManyArgs} args - Arguments to create many Experiences.
   * @example
   * // Create many Experiences
   * const experience = await prisma.experience.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExperienceCreateManyArgs>(args?: Prisma.SelectSubset<T, ExperienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Experiences and returns the data saved in the database.
   * @param {ExperienceCreateManyAndReturnArgs} args - Arguments to create many Experiences.
   * @example
   * // Create many Experiences
   * const experience = await prisma.experience.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Experiences and only return the `id`
   * const experienceWithIdOnly = await prisma.experience.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExperienceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExperienceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Experience.
   * @param {ExperienceDeleteArgs} args - Arguments to delete one Experience.
   * @example
   * // Delete one Experience
   * const Experience = await prisma.experience.delete({
   *   where: {
   *     // ... filter to delete one Experience
   *   }
   * })
   * 
   */
  delete<T extends ExperienceDeleteArgs>(args: Prisma.SelectSubset<T, ExperienceDeleteArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Experience.
   * @param {ExperienceUpdateArgs} args - Arguments to update one Experience.
   * @example
   * // Update one Experience
   * const experience = await prisma.experience.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExperienceUpdateArgs>(args: Prisma.SelectSubset<T, ExperienceUpdateArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Experiences.
   * @param {ExperienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
   * @example
   * // Delete a few Experiences
   * const { count } = await prisma.experience.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExperienceDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExperienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Experiences
   * const experience = await prisma.experience.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExperienceUpdateManyArgs>(args: Prisma.SelectSubset<T, ExperienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Experiences and returns the data updated in the database.
   * @param {ExperienceUpdateManyAndReturnArgs} args - Arguments to update many Experiences.
   * @example
   * // Update many Experiences
   * const experience = await prisma.experience.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Experiences and only return the `id`
   * const experienceWithIdOnly = await prisma.experience.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExperienceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExperienceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Experience.
   * @param {ExperienceUpsertArgs} args - Arguments to update or create a Experience.
   * @example
   * // Update or create a Experience
   * const experience = await prisma.experience.upsert({
   *   create: {
   *     // ... data to create a Experience
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Experience we want to update
   *   }
   * })
   */
  upsert<T extends ExperienceUpsertArgs>(args: Prisma.SelectSubset<T, ExperienceUpsertArgs<ExtArgs>>): Prisma.Prisma__ExperienceClient<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceCountArgs} args - Arguments to filter Experiences to count.
   * @example
   * // Count the number of Experiences
   * const count = await prisma.experience.count({
   *   where: {
   *     // ... the filter for the Experiences we want to count
   *   }
   * })
  **/
  count<T extends ExperienceCountArgs>(
    args?: Prisma.Subset<T, ExperienceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExperienceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Experience.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExperienceAggregateArgs>(args: Prisma.Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

  /**
   * Group by Experience.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperienceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExperienceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExperienceGroupByArgs['orderBy'] }
      : { orderBy?: ExperienceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Experience model
 */
readonly fields: ExperienceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Experience.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExperienceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  citizen<T extends Prisma.CitizenProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Experience model
 */
export interface ExperienceFieldRefs {
  readonly id: Prisma.FieldRef<"Experience", 'String'>
  readonly citizenId: Prisma.FieldRef<"Experience", 'String'>
  readonly company: Prisma.FieldRef<"Experience", 'String'>
  readonly position: Prisma.FieldRef<"Experience", 'String'>
  readonly startDate: Prisma.FieldRef<"Experience", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Experience", 'DateTime'>
  readonly current: Prisma.FieldRef<"Experience", 'Boolean'>
  readonly description: Prisma.FieldRef<"Experience", 'String'>
  readonly createdAt: Prisma.FieldRef<"Experience", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Experience", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Experience findUnique
 */
export type ExperienceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter, which Experience to fetch.
   */
  where: Prisma.ExperienceWhereUniqueInput
}

/**
 * Experience findUniqueOrThrow
 */
export type ExperienceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter, which Experience to fetch.
   */
  where: Prisma.ExperienceWhereUniqueInput
}

/**
 * Experience findFirst
 */
export type ExperienceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter, which Experience to fetch.
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperienceOrderByWithRelationInput | Prisma.ExperienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Experiences.
   */
  cursor?: Prisma.ExperienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Experiences.
   */
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * Experience findFirstOrThrow
 */
export type ExperienceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter, which Experience to fetch.
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperienceOrderByWithRelationInput | Prisma.ExperienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Experiences.
   */
  cursor?: Prisma.ExperienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Experiences.
   */
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * Experience findMany
 */
export type ExperienceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperienceOrderByWithRelationInput | Prisma.ExperienceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Experiences.
   */
  cursor?: Prisma.ExperienceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * Experience create
 */
export type ExperienceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * The data needed to create a Experience.
   */
  data: Prisma.XOR<Prisma.ExperienceCreateInput, Prisma.ExperienceUncheckedCreateInput>
}

/**
 * Experience createMany
 */
export type ExperienceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Experiences.
   */
  data: Prisma.ExperienceCreateManyInput | Prisma.ExperienceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Experience createManyAndReturn
 */
export type ExperienceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * The data used to create many Experiences.
   */
  data: Prisma.ExperienceCreateManyInput | Prisma.ExperienceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Experience update
 */
export type ExperienceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * The data needed to update a Experience.
   */
  data: Prisma.XOR<Prisma.ExperienceUpdateInput, Prisma.ExperienceUncheckedUpdateInput>
  /**
   * Choose, which Experience to update.
   */
  where: Prisma.ExperienceWhereUniqueInput
}

/**
 * Experience updateMany
 */
export type ExperienceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Experiences.
   */
  data: Prisma.XOR<Prisma.ExperienceUpdateManyMutationInput, Prisma.ExperienceUncheckedUpdateManyInput>
  /**
   * Filter which Experiences to update
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * Limit how many Experiences to update.
   */
  limit?: number
}

/**
 * Experience updateManyAndReturn
 */
export type ExperienceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * The data used to update Experiences.
   */
  data: Prisma.XOR<Prisma.ExperienceUpdateManyMutationInput, Prisma.ExperienceUncheckedUpdateManyInput>
  /**
   * Filter which Experiences to update
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * Limit how many Experiences to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Experience upsert
 */
export type ExperienceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * The filter to search for the Experience to update in case it exists.
   */
  where: Prisma.ExperienceWhereUniqueInput
  /**
   * In case the Experience found by the `where` argument doesn't exist, create a new Experience with this data.
   */
  create: Prisma.XOR<Prisma.ExperienceCreateInput, Prisma.ExperienceUncheckedCreateInput>
  /**
   * In case the Experience was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExperienceUpdateInput, Prisma.ExperienceUncheckedUpdateInput>
}

/**
 * Experience delete
 */
export type ExperienceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  /**
   * Filter which Experience to delete.
   */
  where: Prisma.ExperienceWhereUniqueInput
}

/**
 * Experience deleteMany
 */
export type ExperienceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Experiences to delete
   */
  where?: Prisma.ExperienceWhereInput
  /**
   * Limit how many Experiences to delete.
   */
  limit?: number
}

/**
 * Experience without action
 */
export type ExperienceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
}
