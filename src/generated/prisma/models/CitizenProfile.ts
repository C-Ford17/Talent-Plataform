
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CitizenProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CitizenProfile
 * 
 */
export type CitizenProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$CitizenProfilePayload>

export type AggregateCitizenProfile = {
  _count: CitizenProfileCountAggregateOutputType | null
  _min: CitizenProfileMinAggregateOutputType | null
  _max: CitizenProfileMaxAggregateOutputType | null
}

export type CitizenProfileMinAggregateOutputType = {
  id: string | null
  userId: string | null
  firstName: string | null
  lastName: string | null
  phone: string | null
  dateOfBirth: Date | null
  address: string | null
  city: string | null
  province: string | null
  bio: string | null
  jobStatus: $Enums.JobStatus | null
  availability: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CitizenProfileMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  firstName: string | null
  lastName: string | null
  phone: string | null
  dateOfBirth: Date | null
  address: string | null
  city: string | null
  province: string | null
  bio: string | null
  jobStatus: $Enums.JobStatus | null
  availability: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CitizenProfileCountAggregateOutputType = {
  id: number
  userId: number
  firstName: number
  lastName: number
  phone: number
  dateOfBirth: number
  address: number
  city: number
  province: number
  bio: number
  jobStatus: number
  availability: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CitizenProfileMinAggregateInputType = {
  id?: true
  userId?: true
  firstName?: true
  lastName?: true
  phone?: true
  dateOfBirth?: true
  address?: true
  city?: true
  province?: true
  bio?: true
  jobStatus?: true
  availability?: true
  createdAt?: true
  updatedAt?: true
}

export type CitizenProfileMaxAggregateInputType = {
  id?: true
  userId?: true
  firstName?: true
  lastName?: true
  phone?: true
  dateOfBirth?: true
  address?: true
  city?: true
  province?: true
  bio?: true
  jobStatus?: true
  availability?: true
  createdAt?: true
  updatedAt?: true
}

export type CitizenProfileCountAggregateInputType = {
  id?: true
  userId?: true
  firstName?: true
  lastName?: true
  phone?: true
  dateOfBirth?: true
  address?: true
  city?: true
  province?: true
  bio?: true
  jobStatus?: true
  availability?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CitizenProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CitizenProfile to aggregate.
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenProfiles to fetch.
   */
  orderBy?: Prisma.CitizenProfileOrderByWithRelationInput | Prisma.CitizenProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CitizenProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CitizenProfiles
  **/
  _count?: true | CitizenProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CitizenProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CitizenProfileMaxAggregateInputType
}

export type GetCitizenProfileAggregateType<T extends CitizenProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateCitizenProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCitizenProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateCitizenProfile[P]>
}




export type CitizenProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CitizenProfileWhereInput
  orderBy?: Prisma.CitizenProfileOrderByWithAggregationInput | Prisma.CitizenProfileOrderByWithAggregationInput[]
  by: Prisma.CitizenProfileScalarFieldEnum[] | Prisma.CitizenProfileScalarFieldEnum
  having?: Prisma.CitizenProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CitizenProfileCountAggregateInputType | true
  _min?: CitizenProfileMinAggregateInputType
  _max?: CitizenProfileMaxAggregateInputType
}

export type CitizenProfileGroupByOutputType = {
  id: string
  userId: string
  firstName: string
  lastName: string
  phone: string | null
  dateOfBirth: Date | null
  address: string | null
  city: string | null
  province: string | null
  bio: string | null
  jobStatus: $Enums.JobStatus
  availability: string | null
  createdAt: Date
  updatedAt: Date
  _count: CitizenProfileCountAggregateOutputType | null
  _min: CitizenProfileMinAggregateOutputType | null
  _max: CitizenProfileMaxAggregateOutputType | null
}

type GetCitizenProfileGroupByPayload<T extends CitizenProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CitizenProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CitizenProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CitizenProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CitizenProfileGroupByOutputType[P]>
      }
    >
  >



export type CitizenProfileWhereInput = {
  AND?: Prisma.CitizenProfileWhereInput | Prisma.CitizenProfileWhereInput[]
  OR?: Prisma.CitizenProfileWhereInput[]
  NOT?: Prisma.CitizenProfileWhereInput | Prisma.CitizenProfileWhereInput[]
  id?: Prisma.StringFilter<"CitizenProfile"> | string
  userId?: Prisma.StringFilter<"CitizenProfile"> | string
  firstName?: Prisma.StringFilter<"CitizenProfile"> | string
  lastName?: Prisma.StringFilter<"CitizenProfile"> | string
  phone?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeNullableFilter<"CitizenProfile"> | Date | string | null
  address?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  city?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  province?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  bio?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  jobStatus?: Prisma.EnumJobStatusFilter<"CitizenProfile"> | $Enums.JobStatus
  availability?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CitizenProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CitizenProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  education?: Prisma.EducationListRelationFilter
  experience?: Prisma.ExperienceListRelationFilter
  skills?: Prisma.CitizenSkillListRelationFilter
  certifications?: Prisma.CertificationListRelationFilter
}

export type CitizenProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  jobStatus?: Prisma.SortOrder
  availability?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  education?: Prisma.EducationOrderByRelationAggregateInput
  experience?: Prisma.ExperienceOrderByRelationAggregateInput
  skills?: Prisma.CitizenSkillOrderByRelationAggregateInput
  certifications?: Prisma.CertificationOrderByRelationAggregateInput
}

export type CitizenProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.CitizenProfileWhereInput | Prisma.CitizenProfileWhereInput[]
  OR?: Prisma.CitizenProfileWhereInput[]
  NOT?: Prisma.CitizenProfileWhereInput | Prisma.CitizenProfileWhereInput[]
  firstName?: Prisma.StringFilter<"CitizenProfile"> | string
  lastName?: Prisma.StringFilter<"CitizenProfile"> | string
  phone?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeNullableFilter<"CitizenProfile"> | Date | string | null
  address?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  city?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  province?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  bio?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  jobStatus?: Prisma.EnumJobStatusFilter<"CitizenProfile"> | $Enums.JobStatus
  availability?: Prisma.StringNullableFilter<"CitizenProfile"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CitizenProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CitizenProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  education?: Prisma.EducationListRelationFilter
  experience?: Prisma.ExperienceListRelationFilter
  skills?: Prisma.CitizenSkillListRelationFilter
  certifications?: Prisma.CertificationListRelationFilter
}, "id" | "userId">

export type CitizenProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  province?: Prisma.SortOrderInput | Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  jobStatus?: Prisma.SortOrder
  availability?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CitizenProfileCountOrderByAggregateInput
  _max?: Prisma.CitizenProfileMaxOrderByAggregateInput
  _min?: Prisma.CitizenProfileMinOrderByAggregateInput
}

export type CitizenProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.CitizenProfileScalarWhereWithAggregatesInput | Prisma.CitizenProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.CitizenProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CitizenProfileScalarWhereWithAggregatesInput | Prisma.CitizenProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CitizenProfile"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CitizenProfile"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"CitizenProfile"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"CitizenProfile"> | string
  phone?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  dateOfBirth?: Prisma.DateTimeNullableWithAggregatesFilter<"CitizenProfile"> | Date | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  city?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  province?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  bio?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  jobStatus?: Prisma.EnumJobStatusWithAggregatesFilter<"CitizenProfile"> | $Enums.JobStatus
  availability?: Prisma.StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CitizenProfile"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CitizenProfile"> | Date | string
}

export type CitizenProfileCreateInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCitizenProfileInput
  education?: Prisma.EducationCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationUncheckedCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  education?: Prisma.EducationUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUncheckedUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUncheckedUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUncheckedUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileCreateManyInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenProfileNullableScalarRelationFilter = {
  is?: Prisma.CitizenProfileWhereInput | null
  isNot?: Prisma.CitizenProfileWhereInput | null
}

export type CitizenProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  jobStatus?: Prisma.SortOrder
  availability?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  jobStatus?: Prisma.SortOrder
  availability?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  province?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  jobStatus?: Prisma.SortOrder
  availability?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenProfileScalarRelationFilter = {
  is?: Prisma.CitizenProfileWhereInput
  isNot?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.CitizenProfileUpsertWithoutUserInput
  disconnect?: Prisma.CitizenProfileWhereInput | boolean
  delete?: Prisma.CitizenProfileWhereInput | boolean
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutUserInput, Prisma.CitizenProfileUpdateWithoutUserInput>, Prisma.CitizenProfileUncheckedUpdateWithoutUserInput>
}

export type CitizenProfileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.CitizenProfileUpsertWithoutUserInput
  disconnect?: Prisma.CitizenProfileWhereInput | boolean
  delete?: Prisma.CitizenProfileWhereInput | boolean
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutUserInput, Prisma.CitizenProfileUpdateWithoutUserInput>, Prisma.CitizenProfileUncheckedUpdateWithoutUserInput>
}

export type EnumJobStatusFieldUpdateOperationsInput = {
  set?: $Enums.JobStatus
}

export type CitizenProfileCreateNestedOneWithoutSkillsInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutSkillsInput, Prisma.CitizenProfileUncheckedCreateWithoutSkillsInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutSkillsInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUpdateOneRequiredWithoutSkillsNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutSkillsInput, Prisma.CitizenProfileUncheckedCreateWithoutSkillsInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutSkillsInput
  upsert?: Prisma.CitizenProfileUpsertWithoutSkillsInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutSkillsInput, Prisma.CitizenProfileUpdateWithoutSkillsInput>, Prisma.CitizenProfileUncheckedUpdateWithoutSkillsInput>
}

export type CitizenProfileCreateNestedOneWithoutEducationInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutEducationInput, Prisma.CitizenProfileUncheckedCreateWithoutEducationInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutEducationInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUpdateOneRequiredWithoutEducationNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutEducationInput, Prisma.CitizenProfileUncheckedCreateWithoutEducationInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutEducationInput
  upsert?: Prisma.CitizenProfileUpsertWithoutEducationInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutEducationInput, Prisma.CitizenProfileUpdateWithoutEducationInput>, Prisma.CitizenProfileUncheckedUpdateWithoutEducationInput>
}

export type CitizenProfileCreateNestedOneWithoutExperienceInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutExperienceInput, Prisma.CitizenProfileUncheckedCreateWithoutExperienceInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutExperienceInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUpdateOneRequiredWithoutExperienceNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutExperienceInput, Prisma.CitizenProfileUncheckedCreateWithoutExperienceInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutExperienceInput
  upsert?: Prisma.CitizenProfileUpsertWithoutExperienceInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutExperienceInput, Prisma.CitizenProfileUpdateWithoutExperienceInput>, Prisma.CitizenProfileUncheckedUpdateWithoutExperienceInput>
}

export type CitizenProfileCreateNestedOneWithoutCertificationsInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedCreateWithoutCertificationsInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutCertificationsInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
}

export type CitizenProfileUpdateOneRequiredWithoutCertificationsNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenProfileCreateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedCreateWithoutCertificationsInput>
  connectOrCreate?: Prisma.CitizenProfileCreateOrConnectWithoutCertificationsInput
  upsert?: Prisma.CitizenProfileUpsertWithoutCertificationsInput
  connect?: Prisma.CitizenProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CitizenProfileUpdateToOneWithWhereWithoutCertificationsInput, Prisma.CitizenProfileUpdateWithoutCertificationsInput>, Prisma.CitizenProfileUncheckedUpdateWithoutCertificationsInput>
}

export type CitizenProfileCreateWithoutUserInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateWithoutUserInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationUncheckedCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.CitizenProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
}

export type CitizenProfileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutUserInput, Prisma.CitizenProfileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutUserInput, Prisma.CitizenProfileUncheckedCreateWithoutUserInput>
  where?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.CitizenProfileWhereInput
  data: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutUserInput, Prisma.CitizenProfileUncheckedUpdateWithoutUserInput>
}

export type CitizenProfileUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUncheckedUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUncheckedUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUncheckedUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileCreateWithoutSkillsInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCitizenProfileInput
  education?: Prisma.EducationCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateWithoutSkillsInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationUncheckedCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileCreateOrConnectWithoutSkillsInput = {
  where: Prisma.CitizenProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutSkillsInput, Prisma.CitizenProfileUncheckedCreateWithoutSkillsInput>
}

export type CitizenProfileUpsertWithoutSkillsInput = {
  update: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutSkillsInput, Prisma.CitizenProfileUncheckedUpdateWithoutSkillsInput>
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutSkillsInput, Prisma.CitizenProfileUncheckedCreateWithoutSkillsInput>
  where?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileUpdateToOneWithWhereWithoutSkillsInput = {
  where?: Prisma.CitizenProfileWhereInput
  data: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutSkillsInput, Prisma.CitizenProfileUncheckedUpdateWithoutSkillsInput>
}

export type CitizenProfileUpdateWithoutSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  education?: Prisma.EducationUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateWithoutSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUncheckedUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUncheckedUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUncheckedUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileCreateWithoutEducationInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCitizenProfileInput
  experience?: Prisma.ExperienceCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateWithoutEducationInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileCreateOrConnectWithoutEducationInput = {
  where: Prisma.CitizenProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutEducationInput, Prisma.CitizenProfileUncheckedCreateWithoutEducationInput>
}

export type CitizenProfileUpsertWithoutEducationInput = {
  update: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutEducationInput, Prisma.CitizenProfileUncheckedUpdateWithoutEducationInput>
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutEducationInput, Prisma.CitizenProfileUncheckedCreateWithoutEducationInput>
  where?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileUpdateToOneWithWhereWithoutEducationInput = {
  where?: Prisma.CitizenProfileWhereInput
  data: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutEducationInput, Prisma.CitizenProfileUncheckedUpdateWithoutEducationInput>
}

export type CitizenProfileUpdateWithoutEducationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  experience?: Prisma.ExperienceUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateWithoutEducationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  experience?: Prisma.ExperienceUncheckedUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUncheckedUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileCreateWithoutExperienceInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCitizenProfileInput
  education?: Prisma.EducationCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateWithoutExperienceInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationUncheckedCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput
  certifications?: Prisma.CertificationUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileCreateOrConnectWithoutExperienceInput = {
  where: Prisma.CitizenProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutExperienceInput, Prisma.CitizenProfileUncheckedCreateWithoutExperienceInput>
}

export type CitizenProfileUpsertWithoutExperienceInput = {
  update: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutExperienceInput, Prisma.CitizenProfileUncheckedUpdateWithoutExperienceInput>
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutExperienceInput, Prisma.CitizenProfileUncheckedCreateWithoutExperienceInput>
  where?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileUpdateToOneWithWhereWithoutExperienceInput = {
  where?: Prisma.CitizenProfileWhereInput
  data: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutExperienceInput, Prisma.CitizenProfileUncheckedUpdateWithoutExperienceInput>
}

export type CitizenProfileUpdateWithoutExperienceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  education?: Prisma.EducationUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateWithoutExperienceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUncheckedUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput
  certifications?: Prisma.CertificationUncheckedUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileCreateWithoutCertificationsInput = {
  id?: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCitizenProfileInput
  education?: Prisma.EducationCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileUncheckedCreateWithoutCertificationsInput = {
  id?: string
  userId: string
  firstName: string
  lastName: string
  phone?: string | null
  dateOfBirth?: Date | string | null
  address?: string | null
  city?: string | null
  province?: string | null
  bio?: string | null
  jobStatus?: $Enums.JobStatus
  availability?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  education?: Prisma.EducationUncheckedCreateNestedManyWithoutCitizenInput
  experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutCitizenInput
  skills?: Prisma.CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput
}

export type CitizenProfileCreateOrConnectWithoutCertificationsInput = {
  where: Prisma.CitizenProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedCreateWithoutCertificationsInput>
}

export type CitizenProfileUpsertWithoutCertificationsInput = {
  update: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedUpdateWithoutCertificationsInput>
  create: Prisma.XOR<Prisma.CitizenProfileCreateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedCreateWithoutCertificationsInput>
  where?: Prisma.CitizenProfileWhereInput
}

export type CitizenProfileUpdateToOneWithWhereWithoutCertificationsInput = {
  where?: Prisma.CitizenProfileWhereInput
  data: Prisma.XOR<Prisma.CitizenProfileUpdateWithoutCertificationsInput, Prisma.CitizenProfileUncheckedUpdateWithoutCertificationsInput>
}

export type CitizenProfileUpdateWithoutCertificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  education?: Prisma.EducationUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUpdateManyWithoutCitizenNestedInput
}

export type CitizenProfileUncheckedUpdateWithoutCertificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dateOfBirth?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  province?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  jobStatus?: Prisma.EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
  availability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  education?: Prisma.EducationUncheckedUpdateManyWithoutCitizenNestedInput
  experience?: Prisma.ExperienceUncheckedUpdateManyWithoutCitizenNestedInput
  skills?: Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput
}


/**
 * Count Type CitizenProfileCountOutputType
 */

export type CitizenProfileCountOutputType = {
  education: number
  experience: number
  skills: number
  certifications: number
}

export type CitizenProfileCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  education?: boolean | CitizenProfileCountOutputTypeCountEducationArgs
  experience?: boolean | CitizenProfileCountOutputTypeCountExperienceArgs
  skills?: boolean | CitizenProfileCountOutputTypeCountSkillsArgs
  certifications?: boolean | CitizenProfileCountOutputTypeCountCertificationsArgs
}

/**
 * CitizenProfileCountOutputType without action
 */
export type CitizenProfileCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfileCountOutputType
   */
  select?: Prisma.CitizenProfileCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CitizenProfileCountOutputType without action
 */
export type CitizenProfileCountOutputTypeCountEducationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EducationWhereInput
}

/**
 * CitizenProfileCountOutputType without action
 */
export type CitizenProfileCountOutputTypeCountExperienceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExperienceWhereInput
}

/**
 * CitizenProfileCountOutputType without action
 */
export type CitizenProfileCountOutputTypeCountSkillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CitizenSkillWhereInput
}

/**
 * CitizenProfileCountOutputType without action
 */
export type CitizenProfileCountOutputTypeCountCertificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CertificationWhereInput
}


export type CitizenProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  firstName?: boolean
  lastName?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  bio?: boolean
  jobStatus?: boolean
  availability?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  education?: boolean | Prisma.CitizenProfile$educationArgs<ExtArgs>
  experience?: boolean | Prisma.CitizenProfile$experienceArgs<ExtArgs>
  skills?: boolean | Prisma.CitizenProfile$skillsArgs<ExtArgs>
  certifications?: boolean | Prisma.CitizenProfile$certificationsArgs<ExtArgs>
  _count?: boolean | Prisma.CitizenProfileCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenProfile"]>

export type CitizenProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  firstName?: boolean
  lastName?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  bio?: boolean
  jobStatus?: boolean
  availability?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenProfile"]>

export type CitizenProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  firstName?: boolean
  lastName?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  bio?: boolean
  jobStatus?: boolean
  availability?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenProfile"]>

export type CitizenProfileSelectScalar = {
  id?: boolean
  userId?: boolean
  firstName?: boolean
  lastName?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  address?: boolean
  city?: boolean
  province?: boolean
  bio?: boolean
  jobStatus?: boolean
  availability?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CitizenProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "firstName" | "lastName" | "phone" | "dateOfBirth" | "address" | "city" | "province" | "bio" | "jobStatus" | "availability" | "createdAt" | "updatedAt", ExtArgs["result"]["citizenProfile"]>
export type CitizenProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  education?: boolean | Prisma.CitizenProfile$educationArgs<ExtArgs>
  experience?: boolean | Prisma.CitizenProfile$experienceArgs<ExtArgs>
  skills?: boolean | Prisma.CitizenProfile$skillsArgs<ExtArgs>
  certifications?: boolean | Prisma.CitizenProfile$certificationsArgs<ExtArgs>
  _count?: boolean | Prisma.CitizenProfileCountOutputTypeDefaultArgs<ExtArgs>
}
export type CitizenProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CitizenProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CitizenProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CitizenProfile"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    education: Prisma.$EducationPayload<ExtArgs>[]
    experience: Prisma.$ExperiencePayload<ExtArgs>[]
    skills: Prisma.$CitizenSkillPayload<ExtArgs>[]
    certifications: Prisma.$CertificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    firstName: string
    lastName: string
    phone: string | null
    dateOfBirth: Date | null
    address: string | null
    city: string | null
    province: string | null
    bio: string | null
    jobStatus: $Enums.JobStatus
    availability: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["citizenProfile"]>
  composites: {}
}

export type CitizenProfileGetPayload<S extends boolean | null | undefined | CitizenProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload, S>

export type CitizenProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CitizenProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CitizenProfileCountAggregateInputType | true
  }

export interface CitizenProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CitizenProfile'], meta: { name: 'CitizenProfile' } }
  /**
   * Find zero or one CitizenProfile that matches the filter.
   * @param {CitizenProfileFindUniqueArgs} args - Arguments to find a CitizenProfile
   * @example
   * // Get one CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CitizenProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, CitizenProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CitizenProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CitizenProfileFindUniqueOrThrowArgs} args - Arguments to find a CitizenProfile
   * @example
   * // Get one CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CitizenProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CitizenProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CitizenProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileFindFirstArgs} args - Arguments to find a CitizenProfile
   * @example
   * // Get one CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CitizenProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, CitizenProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CitizenProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileFindFirstOrThrowArgs} args - Arguments to find a CitizenProfile
   * @example
   * // Get one CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CitizenProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CitizenProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CitizenProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CitizenProfiles
   * const citizenProfiles = await prisma.citizenProfile.findMany()
   * 
   * // Get first 10 CitizenProfiles
   * const citizenProfiles = await prisma.citizenProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const citizenProfileWithIdOnly = await prisma.citizenProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CitizenProfileFindManyArgs>(args?: Prisma.SelectSubset<T, CitizenProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CitizenProfile.
   * @param {CitizenProfileCreateArgs} args - Arguments to create a CitizenProfile.
   * @example
   * // Create one CitizenProfile
   * const CitizenProfile = await prisma.citizenProfile.create({
   *   data: {
   *     // ... data to create a CitizenProfile
   *   }
   * })
   * 
   */
  create<T extends CitizenProfileCreateArgs>(args: Prisma.SelectSubset<T, CitizenProfileCreateArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CitizenProfiles.
   * @param {CitizenProfileCreateManyArgs} args - Arguments to create many CitizenProfiles.
   * @example
   * // Create many CitizenProfiles
   * const citizenProfile = await prisma.citizenProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CitizenProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, CitizenProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CitizenProfiles and returns the data saved in the database.
   * @param {CitizenProfileCreateManyAndReturnArgs} args - Arguments to create many CitizenProfiles.
   * @example
   * // Create many CitizenProfiles
   * const citizenProfile = await prisma.citizenProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CitizenProfiles and only return the `id`
   * const citizenProfileWithIdOnly = await prisma.citizenProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CitizenProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CitizenProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CitizenProfile.
   * @param {CitizenProfileDeleteArgs} args - Arguments to delete one CitizenProfile.
   * @example
   * // Delete one CitizenProfile
   * const CitizenProfile = await prisma.citizenProfile.delete({
   *   where: {
   *     // ... filter to delete one CitizenProfile
   *   }
   * })
   * 
   */
  delete<T extends CitizenProfileDeleteArgs>(args: Prisma.SelectSubset<T, CitizenProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CitizenProfile.
   * @param {CitizenProfileUpdateArgs} args - Arguments to update one CitizenProfile.
   * @example
   * // Update one CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CitizenProfileUpdateArgs>(args: Prisma.SelectSubset<T, CitizenProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CitizenProfiles.
   * @param {CitizenProfileDeleteManyArgs} args - Arguments to filter CitizenProfiles to delete.
   * @example
   * // Delete a few CitizenProfiles
   * const { count } = await prisma.citizenProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CitizenProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, CitizenProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CitizenProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CitizenProfiles
   * const citizenProfile = await prisma.citizenProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CitizenProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, CitizenProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CitizenProfiles and returns the data updated in the database.
   * @param {CitizenProfileUpdateManyAndReturnArgs} args - Arguments to update many CitizenProfiles.
   * @example
   * // Update many CitizenProfiles
   * const citizenProfile = await prisma.citizenProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CitizenProfiles and only return the `id`
   * const citizenProfileWithIdOnly = await prisma.citizenProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CitizenProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CitizenProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CitizenProfile.
   * @param {CitizenProfileUpsertArgs} args - Arguments to update or create a CitizenProfile.
   * @example
   * // Update or create a CitizenProfile
   * const citizenProfile = await prisma.citizenProfile.upsert({
   *   create: {
   *     // ... data to create a CitizenProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CitizenProfile we want to update
   *   }
   * })
   */
  upsert<T extends CitizenProfileUpsertArgs>(args: Prisma.SelectSubset<T, CitizenProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CitizenProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileCountArgs} args - Arguments to filter CitizenProfiles to count.
   * @example
   * // Count the number of CitizenProfiles
   * const count = await prisma.citizenProfile.count({
   *   where: {
   *     // ... the filter for the CitizenProfiles we want to count
   *   }
   * })
  **/
  count<T extends CitizenProfileCountArgs>(
    args?: Prisma.Subset<T, CitizenProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CitizenProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CitizenProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CitizenProfileAggregateArgs>(args: Prisma.Subset<T, CitizenProfileAggregateArgs>): Prisma.PrismaPromise<GetCitizenProfileAggregateType<T>>

  /**
   * Group by CitizenProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CitizenProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CitizenProfileGroupByArgs['orderBy'] }
      : { orderBy?: CitizenProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CitizenProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitizenProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CitizenProfile model
 */
readonly fields: CitizenProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CitizenProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CitizenProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  education<T extends Prisma.CitizenProfile$educationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfile$educationArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  experience<T extends Prisma.CitizenProfile$experienceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfile$experienceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  skills<T extends Prisma.CitizenProfile$skillsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfile$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  certifications<T extends Prisma.CitizenProfile$certificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfile$certificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CitizenProfile model
 */
export interface CitizenProfileFieldRefs {
  readonly id: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly userId: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly firstName: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly lastName: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly phone: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly dateOfBirth: Prisma.FieldRef<"CitizenProfile", 'DateTime'>
  readonly address: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly city: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly province: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly bio: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly jobStatus: Prisma.FieldRef<"CitizenProfile", 'JobStatus'>
  readonly availability: Prisma.FieldRef<"CitizenProfile", 'String'>
  readonly createdAt: Prisma.FieldRef<"CitizenProfile", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CitizenProfile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CitizenProfile findUnique
 */
export type CitizenProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter, which CitizenProfile to fetch.
   */
  where: Prisma.CitizenProfileWhereUniqueInput
}

/**
 * CitizenProfile findUniqueOrThrow
 */
export type CitizenProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter, which CitizenProfile to fetch.
   */
  where: Prisma.CitizenProfileWhereUniqueInput
}

/**
 * CitizenProfile findFirst
 */
export type CitizenProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter, which CitizenProfile to fetch.
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenProfiles to fetch.
   */
  orderBy?: Prisma.CitizenProfileOrderByWithRelationInput | Prisma.CitizenProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CitizenProfiles.
   */
  cursor?: Prisma.CitizenProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CitizenProfiles.
   */
  distinct?: Prisma.CitizenProfileScalarFieldEnum | Prisma.CitizenProfileScalarFieldEnum[]
}

/**
 * CitizenProfile findFirstOrThrow
 */
export type CitizenProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter, which CitizenProfile to fetch.
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenProfiles to fetch.
   */
  orderBy?: Prisma.CitizenProfileOrderByWithRelationInput | Prisma.CitizenProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CitizenProfiles.
   */
  cursor?: Prisma.CitizenProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CitizenProfiles.
   */
  distinct?: Prisma.CitizenProfileScalarFieldEnum | Prisma.CitizenProfileScalarFieldEnum[]
}

/**
 * CitizenProfile findMany
 */
export type CitizenProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter, which CitizenProfiles to fetch.
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenProfiles to fetch.
   */
  orderBy?: Prisma.CitizenProfileOrderByWithRelationInput | Prisma.CitizenProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CitizenProfiles.
   */
  cursor?: Prisma.CitizenProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenProfiles.
   */
  skip?: number
  distinct?: Prisma.CitizenProfileScalarFieldEnum | Prisma.CitizenProfileScalarFieldEnum[]
}

/**
 * CitizenProfile create
 */
export type CitizenProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a CitizenProfile.
   */
  data: Prisma.XOR<Prisma.CitizenProfileCreateInput, Prisma.CitizenProfileUncheckedCreateInput>
}

/**
 * CitizenProfile createMany
 */
export type CitizenProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CitizenProfiles.
   */
  data: Prisma.CitizenProfileCreateManyInput | Prisma.CitizenProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CitizenProfile createManyAndReturn
 */
export type CitizenProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * The data used to create many CitizenProfiles.
   */
  data: Prisma.CitizenProfileCreateManyInput | Prisma.CitizenProfileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CitizenProfile update
 */
export type CitizenProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a CitizenProfile.
   */
  data: Prisma.XOR<Prisma.CitizenProfileUpdateInput, Prisma.CitizenProfileUncheckedUpdateInput>
  /**
   * Choose, which CitizenProfile to update.
   */
  where: Prisma.CitizenProfileWhereUniqueInput
}

/**
 * CitizenProfile updateMany
 */
export type CitizenProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CitizenProfiles.
   */
  data: Prisma.XOR<Prisma.CitizenProfileUpdateManyMutationInput, Prisma.CitizenProfileUncheckedUpdateManyInput>
  /**
   * Filter which CitizenProfiles to update
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * Limit how many CitizenProfiles to update.
   */
  limit?: number
}

/**
 * CitizenProfile updateManyAndReturn
 */
export type CitizenProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * The data used to update CitizenProfiles.
   */
  data: Prisma.XOR<Prisma.CitizenProfileUpdateManyMutationInput, Prisma.CitizenProfileUncheckedUpdateManyInput>
  /**
   * Filter which CitizenProfiles to update
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * Limit how many CitizenProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CitizenProfile upsert
 */
export type CitizenProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the CitizenProfile to update in case it exists.
   */
  where: Prisma.CitizenProfileWhereUniqueInput
  /**
   * In case the CitizenProfile found by the `where` argument doesn't exist, create a new CitizenProfile with this data.
   */
  create: Prisma.XOR<Prisma.CitizenProfileCreateInput, Prisma.CitizenProfileUncheckedCreateInput>
  /**
   * In case the CitizenProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CitizenProfileUpdateInput, Prisma.CitizenProfileUncheckedUpdateInput>
}

/**
 * CitizenProfile delete
 */
export type CitizenProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
  /**
   * Filter which CitizenProfile to delete.
   */
  where: Prisma.CitizenProfileWhereUniqueInput
}

/**
 * CitizenProfile deleteMany
 */
export type CitizenProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CitizenProfiles to delete
   */
  where?: Prisma.CitizenProfileWhereInput
  /**
   * Limit how many CitizenProfiles to delete.
   */
  limit?: number
}

/**
 * CitizenProfile.education
 */
export type CitizenProfile$educationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Education
   */
  select?: Prisma.EducationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Education
   */
  omit?: Prisma.EducationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EducationInclude<ExtArgs> | null
  where?: Prisma.EducationWhereInput
  orderBy?: Prisma.EducationOrderByWithRelationInput | Prisma.EducationOrderByWithRelationInput[]
  cursor?: Prisma.EducationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EducationScalarFieldEnum | Prisma.EducationScalarFieldEnum[]
}

/**
 * CitizenProfile.experience
 */
export type CitizenProfile$experienceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experience
   */
  select?: Prisma.ExperienceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experience
   */
  omit?: Prisma.ExperienceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperienceInclude<ExtArgs> | null
  where?: Prisma.ExperienceWhereInput
  orderBy?: Prisma.ExperienceOrderByWithRelationInput | Prisma.ExperienceOrderByWithRelationInput[]
  cursor?: Prisma.ExperienceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExperienceScalarFieldEnum | Prisma.ExperienceScalarFieldEnum[]
}

/**
 * CitizenProfile.skills
 */
export type CitizenProfile$skillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  where?: Prisma.CitizenSkillWhereInput
  orderBy?: Prisma.CitizenSkillOrderByWithRelationInput | Prisma.CitizenSkillOrderByWithRelationInput[]
  cursor?: Prisma.CitizenSkillWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CitizenSkillScalarFieldEnum | Prisma.CitizenSkillScalarFieldEnum[]
}

/**
 * CitizenProfile.certifications
 */
export type CitizenProfile$certificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  where?: Prisma.CertificationWhereInput
  orderBy?: Prisma.CertificationOrderByWithRelationInput | Prisma.CertificationOrderByWithRelationInput[]
  cursor?: Prisma.CertificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CertificationScalarFieldEnum | Prisma.CertificationScalarFieldEnum[]
}

/**
 * CitizenProfile without action
 */
export type CitizenProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenProfile
   */
  select?: Prisma.CitizenProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenProfile
   */
  omit?: Prisma.CitizenProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenProfileInclude<ExtArgs> | null
}
