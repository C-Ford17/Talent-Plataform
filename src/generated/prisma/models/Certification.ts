
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Certification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Certification
 * 
 */
export type CertificationModel = runtime.Types.Result.DefaultSelection<Prisma.$CertificationPayload>

export type AggregateCertification = {
  _count: CertificationCountAggregateOutputType | null
  _min: CertificationMinAggregateOutputType | null
  _max: CertificationMaxAggregateOutputType | null
}

export type CertificationMinAggregateOutputType = {
  id: string | null
  citizenId: string | null
  name: string | null
  issuingOrg: string | null
  issueDate: Date | null
  expiryDate: Date | null
  credentialId: string | null
  credentialUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CertificationMaxAggregateOutputType = {
  id: string | null
  citizenId: string | null
  name: string | null
  issuingOrg: string | null
  issueDate: Date | null
  expiryDate: Date | null
  credentialId: string | null
  credentialUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CertificationCountAggregateOutputType = {
  id: number
  citizenId: number
  name: number
  issuingOrg: number
  issueDate: number
  expiryDate: number
  credentialId: number
  credentialUrl: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CertificationMinAggregateInputType = {
  id?: true
  citizenId?: true
  name?: true
  issuingOrg?: true
  issueDate?: true
  expiryDate?: true
  credentialId?: true
  credentialUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type CertificationMaxAggregateInputType = {
  id?: true
  citizenId?: true
  name?: true
  issuingOrg?: true
  issueDate?: true
  expiryDate?: true
  credentialId?: true
  credentialUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type CertificationCountAggregateInputType = {
  id?: true
  citizenId?: true
  name?: true
  issuingOrg?: true
  issueDate?: true
  expiryDate?: true
  credentialId?: true
  credentialUrl?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CertificationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Certification to aggregate.
   */
  where?: Prisma.CertificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certifications to fetch.
   */
  orderBy?: Prisma.CertificationOrderByWithRelationInput | Prisma.CertificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CertificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Certifications
  **/
  _count?: true | CertificationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CertificationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CertificationMaxAggregateInputType
}

export type GetCertificationAggregateType<T extends CertificationAggregateArgs> = {
      [P in keyof T & keyof AggregateCertification]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCertification[P]>
    : Prisma.GetScalarType<T[P], AggregateCertification[P]>
}




export type CertificationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CertificationWhereInput
  orderBy?: Prisma.CertificationOrderByWithAggregationInput | Prisma.CertificationOrderByWithAggregationInput[]
  by: Prisma.CertificationScalarFieldEnum[] | Prisma.CertificationScalarFieldEnum
  having?: Prisma.CertificationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CertificationCountAggregateInputType | true
  _min?: CertificationMinAggregateInputType
  _max?: CertificationMaxAggregateInputType
}

export type CertificationGroupByOutputType = {
  id: string
  citizenId: string
  name: string
  issuingOrg: string
  issueDate: Date
  expiryDate: Date | null
  credentialId: string | null
  credentialUrl: string | null
  createdAt: Date
  updatedAt: Date
  _count: CertificationCountAggregateOutputType | null
  _min: CertificationMinAggregateOutputType | null
  _max: CertificationMaxAggregateOutputType | null
}

type GetCertificationGroupByPayload<T extends CertificationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CertificationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CertificationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CertificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CertificationGroupByOutputType[P]>
      }
    >
  >



export type CertificationWhereInput = {
  AND?: Prisma.CertificationWhereInput | Prisma.CertificationWhereInput[]
  OR?: Prisma.CertificationWhereInput[]
  NOT?: Prisma.CertificationWhereInput | Prisma.CertificationWhereInput[]
  id?: Prisma.StringFilter<"Certification"> | string
  citizenId?: Prisma.StringFilter<"Certification"> | string
  name?: Prisma.StringFilter<"Certification"> | string
  issuingOrg?: Prisma.StringFilter<"Certification"> | string
  issueDate?: Prisma.DateTimeFilter<"Certification"> | Date | string
  expiryDate?: Prisma.DateTimeNullableFilter<"Certification"> | Date | string | null
  credentialId?: Prisma.StringNullableFilter<"Certification"> | string | null
  credentialUrl?: Prisma.StringNullableFilter<"Certification"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
}

export type CertificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  issuingOrg?: Prisma.SortOrder
  issueDate?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  credentialId?: Prisma.SortOrderInput | Prisma.SortOrder
  credentialUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  citizen?: Prisma.CitizenProfileOrderByWithRelationInput
}

export type CertificationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CertificationWhereInput | Prisma.CertificationWhereInput[]
  OR?: Prisma.CertificationWhereInput[]
  NOT?: Prisma.CertificationWhereInput | Prisma.CertificationWhereInput[]
  citizenId?: Prisma.StringFilter<"Certification"> | string
  name?: Prisma.StringFilter<"Certification"> | string
  issuingOrg?: Prisma.StringFilter<"Certification"> | string
  issueDate?: Prisma.DateTimeFilter<"Certification"> | Date | string
  expiryDate?: Prisma.DateTimeNullableFilter<"Certification"> | Date | string | null
  credentialId?: Prisma.StringNullableFilter<"Certification"> | string | null
  credentialUrl?: Prisma.StringNullableFilter<"Certification"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
}, "id">

export type CertificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  issuingOrg?: Prisma.SortOrder
  issueDate?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  credentialId?: Prisma.SortOrderInput | Prisma.SortOrder
  credentialUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CertificationCountOrderByAggregateInput
  _max?: Prisma.CertificationMaxOrderByAggregateInput
  _min?: Prisma.CertificationMinOrderByAggregateInput
}

export type CertificationScalarWhereWithAggregatesInput = {
  AND?: Prisma.CertificationScalarWhereWithAggregatesInput | Prisma.CertificationScalarWhereWithAggregatesInput[]
  OR?: Prisma.CertificationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CertificationScalarWhereWithAggregatesInput | Prisma.CertificationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Certification"> | string
  citizenId?: Prisma.StringWithAggregatesFilter<"Certification"> | string
  name?: Prisma.StringWithAggregatesFilter<"Certification"> | string
  issuingOrg?: Prisma.StringWithAggregatesFilter<"Certification"> | string
  issueDate?: Prisma.DateTimeWithAggregatesFilter<"Certification"> | Date | string
  expiryDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Certification"> | Date | string | null
  credentialId?: Prisma.StringNullableWithAggregatesFilter<"Certification"> | string | null
  credentialUrl?: Prisma.StringNullableWithAggregatesFilter<"Certification"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Certification"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Certification"> | Date | string
}

export type CertificationCreateInput = {
  id?: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  citizen: Prisma.CitizenProfileCreateNestedOneWithoutCertificationsInput
}

export type CertificationUncheckedCreateInput = {
  id?: string
  citizenId: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CertificationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  citizen?: Prisma.CitizenProfileUpdateOneRequiredWithoutCertificationsNestedInput
}

export type CertificationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CertificationCreateManyInput = {
  id?: string
  citizenId: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CertificationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CertificationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CertificationListRelationFilter = {
  every?: Prisma.CertificationWhereInput
  some?: Prisma.CertificationWhereInput
  none?: Prisma.CertificationWhereInput
}

export type CertificationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CertificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  issuingOrg?: Prisma.SortOrder
  issueDate?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  credentialId?: Prisma.SortOrder
  credentialUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CertificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  issuingOrg?: Prisma.SortOrder
  issueDate?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  credentialId?: Prisma.SortOrder
  credentialUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CertificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  issuingOrg?: Prisma.SortOrder
  issueDate?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  credentialId?: Prisma.SortOrder
  credentialUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CertificationCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput> | Prisma.CertificationCreateWithoutCitizenInput[] | Prisma.CertificationUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CertificationCreateOrConnectWithoutCitizenInput | Prisma.CertificationCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.CertificationCreateManyCitizenInputEnvelope
  connect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
}

export type CertificationUncheckedCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput> | Prisma.CertificationCreateWithoutCitizenInput[] | Prisma.CertificationUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CertificationCreateOrConnectWithoutCitizenInput | Prisma.CertificationCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.CertificationCreateManyCitizenInputEnvelope
  connect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
}

export type CertificationUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput> | Prisma.CertificationCreateWithoutCitizenInput[] | Prisma.CertificationUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CertificationCreateOrConnectWithoutCitizenInput | Prisma.CertificationCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.CertificationUpsertWithWhereUniqueWithoutCitizenInput | Prisma.CertificationUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.CertificationCreateManyCitizenInputEnvelope
  set?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  disconnect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  delete?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  connect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  update?: Prisma.CertificationUpdateWithWhereUniqueWithoutCitizenInput | Prisma.CertificationUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.CertificationUpdateManyWithWhereWithoutCitizenInput | Prisma.CertificationUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.CertificationScalarWhereInput | Prisma.CertificationScalarWhereInput[]
}

export type CertificationUncheckedUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput> | Prisma.CertificationCreateWithoutCitizenInput[] | Prisma.CertificationUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CertificationCreateOrConnectWithoutCitizenInput | Prisma.CertificationCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.CertificationUpsertWithWhereUniqueWithoutCitizenInput | Prisma.CertificationUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.CertificationCreateManyCitizenInputEnvelope
  set?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  disconnect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  delete?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  connect?: Prisma.CertificationWhereUniqueInput | Prisma.CertificationWhereUniqueInput[]
  update?: Prisma.CertificationUpdateWithWhereUniqueWithoutCitizenInput | Prisma.CertificationUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.CertificationUpdateManyWithWhereWithoutCitizenInput | Prisma.CertificationUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.CertificationScalarWhereInput | Prisma.CertificationScalarWhereInput[]
}

export type CertificationCreateWithoutCitizenInput = {
  id?: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CertificationUncheckedCreateWithoutCitizenInput = {
  id?: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CertificationCreateOrConnectWithoutCitizenInput = {
  where: Prisma.CertificationWhereUniqueInput
  create: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput>
}

export type CertificationCreateManyCitizenInputEnvelope = {
  data: Prisma.CertificationCreateManyCitizenInput | Prisma.CertificationCreateManyCitizenInput[]
  skipDuplicates?: boolean
}

export type CertificationUpsertWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.CertificationWhereUniqueInput
  update: Prisma.XOR<Prisma.CertificationUpdateWithoutCitizenInput, Prisma.CertificationUncheckedUpdateWithoutCitizenInput>
  create: Prisma.XOR<Prisma.CertificationCreateWithoutCitizenInput, Prisma.CertificationUncheckedCreateWithoutCitizenInput>
}

export type CertificationUpdateWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.CertificationWhereUniqueInput
  data: Prisma.XOR<Prisma.CertificationUpdateWithoutCitizenInput, Prisma.CertificationUncheckedUpdateWithoutCitizenInput>
}

export type CertificationUpdateManyWithWhereWithoutCitizenInput = {
  where: Prisma.CertificationScalarWhereInput
  data: Prisma.XOR<Prisma.CertificationUpdateManyMutationInput, Prisma.CertificationUncheckedUpdateManyWithoutCitizenInput>
}

export type CertificationScalarWhereInput = {
  AND?: Prisma.CertificationScalarWhereInput | Prisma.CertificationScalarWhereInput[]
  OR?: Prisma.CertificationScalarWhereInput[]
  NOT?: Prisma.CertificationScalarWhereInput | Prisma.CertificationScalarWhereInput[]
  id?: Prisma.StringFilter<"Certification"> | string
  citizenId?: Prisma.StringFilter<"Certification"> | string
  name?: Prisma.StringFilter<"Certification"> | string
  issuingOrg?: Prisma.StringFilter<"Certification"> | string
  issueDate?: Prisma.DateTimeFilter<"Certification"> | Date | string
  expiryDate?: Prisma.DateTimeNullableFilter<"Certification"> | Date | string | null
  credentialId?: Prisma.StringNullableFilter<"Certification"> | string | null
  credentialUrl?: Prisma.StringNullableFilter<"Certification"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Certification"> | Date | string
}

export type CertificationCreateManyCitizenInput = {
  id?: string
  name: string
  issuingOrg: string
  issueDate: Date | string
  expiryDate?: Date | string | null
  credentialId?: string | null
  credentialUrl?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CertificationUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CertificationUncheckedUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CertificationUncheckedUpdateManyWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  issuingOrg?: Prisma.StringFieldUpdateOperationsInput | string
  issueDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  credentialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  credentialUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CertificationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  name?: boolean
  issuingOrg?: boolean
  issueDate?: boolean
  expiryDate?: boolean
  credentialId?: boolean
  credentialUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["certification"]>

export type CertificationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  name?: boolean
  issuingOrg?: boolean
  issueDate?: boolean
  expiryDate?: boolean
  credentialId?: boolean
  credentialUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["certification"]>

export type CertificationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  name?: boolean
  issuingOrg?: boolean
  issueDate?: boolean
  expiryDate?: boolean
  credentialId?: boolean
  credentialUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["certification"]>

export type CertificationSelectScalar = {
  id?: boolean
  citizenId?: boolean
  name?: boolean
  issuingOrg?: boolean
  issueDate?: boolean
  expiryDate?: boolean
  credentialId?: boolean
  credentialUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CertificationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "citizenId" | "name" | "issuingOrg" | "issueDate" | "expiryDate" | "credentialId" | "credentialUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["certification"]>
export type CertificationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}
export type CertificationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}
export type CertificationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
}

export type $CertificationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Certification"
  objects: {
    citizen: Prisma.$CitizenProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    citizenId: string
    name: string
    issuingOrg: string
    issueDate: Date
    expiryDate: Date | null
    credentialId: string | null
    credentialUrl: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["certification"]>
  composites: {}
}

export type CertificationGetPayload<S extends boolean | null | undefined | CertificationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CertificationPayload, S>

export type CertificationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CertificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CertificationCountAggregateInputType | true
  }

export interface CertificationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certification'], meta: { name: 'Certification' } }
  /**
   * Find zero or one Certification that matches the filter.
   * @param {CertificationFindUniqueArgs} args - Arguments to find a Certification
   * @example
   * // Get one Certification
   * const certification = await prisma.certification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CertificationFindUniqueArgs>(args: Prisma.SelectSubset<T, CertificationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Certification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CertificationFindUniqueOrThrowArgs} args - Arguments to find a Certification
   * @example
   * // Get one Certification
   * const certification = await prisma.certification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CertificationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CertificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Certification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationFindFirstArgs} args - Arguments to find a Certification
   * @example
   * // Get one Certification
   * const certification = await prisma.certification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CertificationFindFirstArgs>(args?: Prisma.SelectSubset<T, CertificationFindFirstArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Certification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationFindFirstOrThrowArgs} args - Arguments to find a Certification
   * @example
   * // Get one Certification
   * const certification = await prisma.certification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CertificationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CertificationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Certifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Certifications
   * const certifications = await prisma.certification.findMany()
   * 
   * // Get first 10 Certifications
   * const certifications = await prisma.certification.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const certificationWithIdOnly = await prisma.certification.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CertificationFindManyArgs>(args?: Prisma.SelectSubset<T, CertificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Certification.
   * @param {CertificationCreateArgs} args - Arguments to create a Certification.
   * @example
   * // Create one Certification
   * const Certification = await prisma.certification.create({
   *   data: {
   *     // ... data to create a Certification
   *   }
   * })
   * 
   */
  create<T extends CertificationCreateArgs>(args: Prisma.SelectSubset<T, CertificationCreateArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Certifications.
   * @param {CertificationCreateManyArgs} args - Arguments to create many Certifications.
   * @example
   * // Create many Certifications
   * const certification = await prisma.certification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CertificationCreateManyArgs>(args?: Prisma.SelectSubset<T, CertificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Certifications and returns the data saved in the database.
   * @param {CertificationCreateManyAndReturnArgs} args - Arguments to create many Certifications.
   * @example
   * // Create many Certifications
   * const certification = await prisma.certification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Certifications and only return the `id`
   * const certificationWithIdOnly = await prisma.certification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CertificationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CertificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Certification.
   * @param {CertificationDeleteArgs} args - Arguments to delete one Certification.
   * @example
   * // Delete one Certification
   * const Certification = await prisma.certification.delete({
   *   where: {
   *     // ... filter to delete one Certification
   *   }
   * })
   * 
   */
  delete<T extends CertificationDeleteArgs>(args: Prisma.SelectSubset<T, CertificationDeleteArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Certification.
   * @param {CertificationUpdateArgs} args - Arguments to update one Certification.
   * @example
   * // Update one Certification
   * const certification = await prisma.certification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CertificationUpdateArgs>(args: Prisma.SelectSubset<T, CertificationUpdateArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Certifications.
   * @param {CertificationDeleteManyArgs} args - Arguments to filter Certifications to delete.
   * @example
   * // Delete a few Certifications
   * const { count } = await prisma.certification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CertificationDeleteManyArgs>(args?: Prisma.SelectSubset<T, CertificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Certifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Certifications
   * const certification = await prisma.certification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CertificationUpdateManyArgs>(args: Prisma.SelectSubset<T, CertificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Certifications and returns the data updated in the database.
   * @param {CertificationUpdateManyAndReturnArgs} args - Arguments to update many Certifications.
   * @example
   * // Update many Certifications
   * const certification = await prisma.certification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Certifications and only return the `id`
   * const certificationWithIdOnly = await prisma.certification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CertificationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CertificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Certification.
   * @param {CertificationUpsertArgs} args - Arguments to update or create a Certification.
   * @example
   * // Update or create a Certification
   * const certification = await prisma.certification.upsert({
   *   create: {
   *     // ... data to create a Certification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Certification we want to update
   *   }
   * })
   */
  upsert<T extends CertificationUpsertArgs>(args: Prisma.SelectSubset<T, CertificationUpsertArgs<ExtArgs>>): Prisma.Prisma__CertificationClient<runtime.Types.Result.GetResult<Prisma.$CertificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Certifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationCountArgs} args - Arguments to filter Certifications to count.
   * @example
   * // Count the number of Certifications
   * const count = await prisma.certification.count({
   *   where: {
   *     // ... the filter for the Certifications we want to count
   *   }
   * })
  **/
  count<T extends CertificationCountArgs>(
    args?: Prisma.Subset<T, CertificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CertificationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Certification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CertificationAggregateArgs>(args: Prisma.Subset<T, CertificationAggregateArgs>): Prisma.PrismaPromise<GetCertificationAggregateType<T>>

  /**
   * Group by Certification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CertificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CertificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CertificationGroupByArgs['orderBy'] }
      : { orderBy?: CertificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CertificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Certification model
 */
readonly fields: CertificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Certification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CertificationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  citizen<T extends Prisma.CitizenProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Certification model
 */
export interface CertificationFieldRefs {
  readonly id: Prisma.FieldRef<"Certification", 'String'>
  readonly citizenId: Prisma.FieldRef<"Certification", 'String'>
  readonly name: Prisma.FieldRef<"Certification", 'String'>
  readonly issuingOrg: Prisma.FieldRef<"Certification", 'String'>
  readonly issueDate: Prisma.FieldRef<"Certification", 'DateTime'>
  readonly expiryDate: Prisma.FieldRef<"Certification", 'DateTime'>
  readonly credentialId: Prisma.FieldRef<"Certification", 'String'>
  readonly credentialUrl: Prisma.FieldRef<"Certification", 'String'>
  readonly createdAt: Prisma.FieldRef<"Certification", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Certification", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Certification findUnique
 */
export type CertificationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter, which Certification to fetch.
   */
  where: Prisma.CertificationWhereUniqueInput
}

/**
 * Certification findUniqueOrThrow
 */
export type CertificationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter, which Certification to fetch.
   */
  where: Prisma.CertificationWhereUniqueInput
}

/**
 * Certification findFirst
 */
export type CertificationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter, which Certification to fetch.
   */
  where?: Prisma.CertificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certifications to fetch.
   */
  orderBy?: Prisma.CertificationOrderByWithRelationInput | Prisma.CertificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Certifications.
   */
  cursor?: Prisma.CertificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Certifications.
   */
  distinct?: Prisma.CertificationScalarFieldEnum | Prisma.CertificationScalarFieldEnum[]
}

/**
 * Certification findFirstOrThrow
 */
export type CertificationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter, which Certification to fetch.
   */
  where?: Prisma.CertificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certifications to fetch.
   */
  orderBy?: Prisma.CertificationOrderByWithRelationInput | Prisma.CertificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Certifications.
   */
  cursor?: Prisma.CertificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Certifications.
   */
  distinct?: Prisma.CertificationScalarFieldEnum | Prisma.CertificationScalarFieldEnum[]
}

/**
 * Certification findMany
 */
export type CertificationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter, which Certifications to fetch.
   */
  where?: Prisma.CertificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Certifications to fetch.
   */
  orderBy?: Prisma.CertificationOrderByWithRelationInput | Prisma.CertificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Certifications.
   */
  cursor?: Prisma.CertificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Certifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Certifications.
   */
  skip?: number
  distinct?: Prisma.CertificationScalarFieldEnum | Prisma.CertificationScalarFieldEnum[]
}

/**
 * Certification create
 */
export type CertificationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * The data needed to create a Certification.
   */
  data: Prisma.XOR<Prisma.CertificationCreateInput, Prisma.CertificationUncheckedCreateInput>
}

/**
 * Certification createMany
 */
export type CertificationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Certifications.
   */
  data: Prisma.CertificationCreateManyInput | Prisma.CertificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Certification createManyAndReturn
 */
export type CertificationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * The data used to create many Certifications.
   */
  data: Prisma.CertificationCreateManyInput | Prisma.CertificationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Certification update
 */
export type CertificationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * The data needed to update a Certification.
   */
  data: Prisma.XOR<Prisma.CertificationUpdateInput, Prisma.CertificationUncheckedUpdateInput>
  /**
   * Choose, which Certification to update.
   */
  where: Prisma.CertificationWhereUniqueInput
}

/**
 * Certification updateMany
 */
export type CertificationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Certifications.
   */
  data: Prisma.XOR<Prisma.CertificationUpdateManyMutationInput, Prisma.CertificationUncheckedUpdateManyInput>
  /**
   * Filter which Certifications to update
   */
  where?: Prisma.CertificationWhereInput
  /**
   * Limit how many Certifications to update.
   */
  limit?: number
}

/**
 * Certification updateManyAndReturn
 */
export type CertificationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * The data used to update Certifications.
   */
  data: Prisma.XOR<Prisma.CertificationUpdateManyMutationInput, Prisma.CertificationUncheckedUpdateManyInput>
  /**
   * Filter which Certifications to update
   */
  where?: Prisma.CertificationWhereInput
  /**
   * Limit how many Certifications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Certification upsert
 */
export type CertificationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * The filter to search for the Certification to update in case it exists.
   */
  where: Prisma.CertificationWhereUniqueInput
  /**
   * In case the Certification found by the `where` argument doesn't exist, create a new Certification with this data.
   */
  create: Prisma.XOR<Prisma.CertificationCreateInput, Prisma.CertificationUncheckedCreateInput>
  /**
   * In case the Certification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CertificationUpdateInput, Prisma.CertificationUncheckedUpdateInput>
}

/**
 * Certification delete
 */
export type CertificationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
  /**
   * Filter which Certification to delete.
   */
  where: Prisma.CertificationWhereUniqueInput
}

/**
 * Certification deleteMany
 */
export type CertificationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Certifications to delete
   */
  where?: Prisma.CertificationWhereInput
  /**
   * Limit how many Certifications to delete.
   */
  limit?: number
}

/**
 * Certification without action
 */
export type CertificationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Certification
   */
  select?: Prisma.CertificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Certification
   */
  omit?: Prisma.CertificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CertificationInclude<ExtArgs> | null
}
