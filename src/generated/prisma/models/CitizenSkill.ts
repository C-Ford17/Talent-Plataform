
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CitizenSkill` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CitizenSkill
 * 
 */
export type CitizenSkillModel = runtime.Types.Result.DefaultSelection<Prisma.$CitizenSkillPayload>

export type AggregateCitizenSkill = {
  _count: CitizenSkillCountAggregateOutputType | null
  _avg: CitizenSkillAvgAggregateOutputType | null
  _sum: CitizenSkillSumAggregateOutputType | null
  _min: CitizenSkillMinAggregateOutputType | null
  _max: CitizenSkillMaxAggregateOutputType | null
}

export type CitizenSkillAvgAggregateOutputType = {
  yearsOfExp: number | null
}

export type CitizenSkillSumAggregateOutputType = {
  yearsOfExp: number | null
}

export type CitizenSkillMinAggregateOutputType = {
  id: string | null
  citizenId: string | null
  skillId: string | null
  level: $Enums.SkillLevel | null
  yearsOfExp: number | null
  verified: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CitizenSkillMaxAggregateOutputType = {
  id: string | null
  citizenId: string | null
  skillId: string | null
  level: $Enums.SkillLevel | null
  yearsOfExp: number | null
  verified: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CitizenSkillCountAggregateOutputType = {
  id: number
  citizenId: number
  skillId: number
  level: number
  yearsOfExp: number
  verified: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CitizenSkillAvgAggregateInputType = {
  yearsOfExp?: true
}

export type CitizenSkillSumAggregateInputType = {
  yearsOfExp?: true
}

export type CitizenSkillMinAggregateInputType = {
  id?: true
  citizenId?: true
  skillId?: true
  level?: true
  yearsOfExp?: true
  verified?: true
  createdAt?: true
  updatedAt?: true
}

export type CitizenSkillMaxAggregateInputType = {
  id?: true
  citizenId?: true
  skillId?: true
  level?: true
  yearsOfExp?: true
  verified?: true
  createdAt?: true
  updatedAt?: true
}

export type CitizenSkillCountAggregateInputType = {
  id?: true
  citizenId?: true
  skillId?: true
  level?: true
  yearsOfExp?: true
  verified?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CitizenSkillAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CitizenSkill to aggregate.
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenSkills to fetch.
   */
  orderBy?: Prisma.CitizenSkillOrderByWithRelationInput | Prisma.CitizenSkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CitizenSkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenSkills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenSkills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CitizenSkills
  **/
  _count?: true | CitizenSkillCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CitizenSkillAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CitizenSkillSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CitizenSkillMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CitizenSkillMaxAggregateInputType
}

export type GetCitizenSkillAggregateType<T extends CitizenSkillAggregateArgs> = {
      [P in keyof T & keyof AggregateCitizenSkill]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCitizenSkill[P]>
    : Prisma.GetScalarType<T[P], AggregateCitizenSkill[P]>
}




export type CitizenSkillGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CitizenSkillWhereInput
  orderBy?: Prisma.CitizenSkillOrderByWithAggregationInput | Prisma.CitizenSkillOrderByWithAggregationInput[]
  by: Prisma.CitizenSkillScalarFieldEnum[] | Prisma.CitizenSkillScalarFieldEnum
  having?: Prisma.CitizenSkillScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CitizenSkillCountAggregateInputType | true
  _avg?: CitizenSkillAvgAggregateInputType
  _sum?: CitizenSkillSumAggregateInputType
  _min?: CitizenSkillMinAggregateInputType
  _max?: CitizenSkillMaxAggregateInputType
}

export type CitizenSkillGroupByOutputType = {
  id: string
  citizenId: string
  skillId: string
  level: $Enums.SkillLevel
  yearsOfExp: number | null
  verified: boolean
  createdAt: Date
  updatedAt: Date
  _count: CitizenSkillCountAggregateOutputType | null
  _avg: CitizenSkillAvgAggregateOutputType | null
  _sum: CitizenSkillSumAggregateOutputType | null
  _min: CitizenSkillMinAggregateOutputType | null
  _max: CitizenSkillMaxAggregateOutputType | null
}

type GetCitizenSkillGroupByPayload<T extends CitizenSkillGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CitizenSkillGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CitizenSkillGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CitizenSkillGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CitizenSkillGroupByOutputType[P]>
      }
    >
  >



export type CitizenSkillWhereInput = {
  AND?: Prisma.CitizenSkillWhereInput | Prisma.CitizenSkillWhereInput[]
  OR?: Prisma.CitizenSkillWhereInput[]
  NOT?: Prisma.CitizenSkillWhereInput | Prisma.CitizenSkillWhereInput[]
  id?: Prisma.StringFilter<"CitizenSkill"> | string
  citizenId?: Prisma.StringFilter<"CitizenSkill"> | string
  skillId?: Prisma.StringFilter<"CitizenSkill"> | string
  level?: Prisma.EnumSkillLevelFilter<"CitizenSkill"> | $Enums.SkillLevel
  yearsOfExp?: Prisma.IntNullableFilter<"CitizenSkill"> | number | null
  verified?: Prisma.BoolFilter<"CitizenSkill"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
  skill?: Prisma.XOR<Prisma.SkillScalarRelationFilter, Prisma.SkillWhereInput>
}

export type CitizenSkillOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  skillId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  yearsOfExp?: Prisma.SortOrderInput | Prisma.SortOrder
  verified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  citizen?: Prisma.CitizenProfileOrderByWithRelationInput
  skill?: Prisma.SkillOrderByWithRelationInput
}

export type CitizenSkillWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  citizenId_skillId?: Prisma.CitizenSkillCitizenIdSkillIdCompoundUniqueInput
  AND?: Prisma.CitizenSkillWhereInput | Prisma.CitizenSkillWhereInput[]
  OR?: Prisma.CitizenSkillWhereInput[]
  NOT?: Prisma.CitizenSkillWhereInput | Prisma.CitizenSkillWhereInput[]
  citizenId?: Prisma.StringFilter<"CitizenSkill"> | string
  skillId?: Prisma.StringFilter<"CitizenSkill"> | string
  level?: Prisma.EnumSkillLevelFilter<"CitizenSkill"> | $Enums.SkillLevel
  yearsOfExp?: Prisma.IntNullableFilter<"CitizenSkill"> | number | null
  verified?: Prisma.BoolFilter<"CitizenSkill"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
  citizen?: Prisma.XOR<Prisma.CitizenProfileScalarRelationFilter, Prisma.CitizenProfileWhereInput>
  skill?: Prisma.XOR<Prisma.SkillScalarRelationFilter, Prisma.SkillWhereInput>
}, "id" | "citizenId_skillId">

export type CitizenSkillOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  skillId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  yearsOfExp?: Prisma.SortOrderInput | Prisma.SortOrder
  verified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CitizenSkillCountOrderByAggregateInput
  _avg?: Prisma.CitizenSkillAvgOrderByAggregateInput
  _max?: Prisma.CitizenSkillMaxOrderByAggregateInput
  _min?: Prisma.CitizenSkillMinOrderByAggregateInput
  _sum?: Prisma.CitizenSkillSumOrderByAggregateInput
}

export type CitizenSkillScalarWhereWithAggregatesInput = {
  AND?: Prisma.CitizenSkillScalarWhereWithAggregatesInput | Prisma.CitizenSkillScalarWhereWithAggregatesInput[]
  OR?: Prisma.CitizenSkillScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CitizenSkillScalarWhereWithAggregatesInput | Prisma.CitizenSkillScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CitizenSkill"> | string
  citizenId?: Prisma.StringWithAggregatesFilter<"CitizenSkill"> | string
  skillId?: Prisma.StringWithAggregatesFilter<"CitizenSkill"> | string
  level?: Prisma.EnumSkillLevelWithAggregatesFilter<"CitizenSkill"> | $Enums.SkillLevel
  yearsOfExp?: Prisma.IntNullableWithAggregatesFilter<"CitizenSkill"> | number | null
  verified?: Prisma.BoolWithAggregatesFilter<"CitizenSkill"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CitizenSkill"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CitizenSkill"> | Date | string
}

export type CitizenSkillCreateInput = {
  id?: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  citizen: Prisma.CitizenProfileCreateNestedOneWithoutSkillsInput
  skill: Prisma.SkillCreateNestedOneWithoutCitizensInput
}

export type CitizenSkillUncheckedCreateInput = {
  id?: string
  citizenId: string
  skillId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  citizen?: Prisma.CitizenProfileUpdateOneRequiredWithoutSkillsNestedInput
  skill?: Prisma.SkillUpdateOneRequiredWithoutCitizensNestedInput
}

export type CitizenSkillUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  skillId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillCreateManyInput = {
  id?: string
  citizenId: string
  skillId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  skillId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillListRelationFilter = {
  every?: Prisma.CitizenSkillWhereInput
  some?: Prisma.CitizenSkillWhereInput
  none?: Prisma.CitizenSkillWhereInput
}

export type CitizenSkillOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CitizenSkillCitizenIdSkillIdCompoundUniqueInput = {
  citizenId: string
  skillId: string
}

export type CitizenSkillCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  skillId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  yearsOfExp?: Prisma.SortOrder
  verified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenSkillAvgOrderByAggregateInput = {
  yearsOfExp?: Prisma.SortOrder
}

export type CitizenSkillMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  skillId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  yearsOfExp?: Prisma.SortOrder
  verified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenSkillMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  citizenId?: Prisma.SortOrder
  skillId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  yearsOfExp?: Prisma.SortOrder
  verified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CitizenSkillSumOrderByAggregateInput = {
  yearsOfExp?: Prisma.SortOrder
}

export type CitizenSkillCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput> | Prisma.CitizenSkillCreateWithoutCitizenInput[] | Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput | Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.CitizenSkillCreateManyCitizenInputEnvelope
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
}

export type CitizenSkillUncheckedCreateNestedManyWithoutCitizenInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput> | Prisma.CitizenSkillCreateWithoutCitizenInput[] | Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput | Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput[]
  createMany?: Prisma.CitizenSkillCreateManyCitizenInputEnvelope
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
}

export type CitizenSkillUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput> | Prisma.CitizenSkillCreateWithoutCitizenInput[] | Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput | Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.CitizenSkillUpsertWithWhereUniqueWithoutCitizenInput | Prisma.CitizenSkillUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.CitizenSkillCreateManyCitizenInputEnvelope
  set?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  disconnect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  delete?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  update?: Prisma.CitizenSkillUpdateWithWhereUniqueWithoutCitizenInput | Prisma.CitizenSkillUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.CitizenSkillUpdateManyWithWhereWithoutCitizenInput | Prisma.CitizenSkillUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
}

export type CitizenSkillUncheckedUpdateManyWithoutCitizenNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput> | Prisma.CitizenSkillCreateWithoutCitizenInput[] | Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput | Prisma.CitizenSkillCreateOrConnectWithoutCitizenInput[]
  upsert?: Prisma.CitizenSkillUpsertWithWhereUniqueWithoutCitizenInput | Prisma.CitizenSkillUpsertWithWhereUniqueWithoutCitizenInput[]
  createMany?: Prisma.CitizenSkillCreateManyCitizenInputEnvelope
  set?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  disconnect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  delete?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  update?: Prisma.CitizenSkillUpdateWithWhereUniqueWithoutCitizenInput | Prisma.CitizenSkillUpdateWithWhereUniqueWithoutCitizenInput[]
  updateMany?: Prisma.CitizenSkillUpdateManyWithWhereWithoutCitizenInput | Prisma.CitizenSkillUpdateManyWithWhereWithoutCitizenInput[]
  deleteMany?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
}

export type CitizenSkillCreateNestedManyWithoutSkillInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput> | Prisma.CitizenSkillCreateWithoutSkillInput[] | Prisma.CitizenSkillUncheckedCreateWithoutSkillInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutSkillInput | Prisma.CitizenSkillCreateOrConnectWithoutSkillInput[]
  createMany?: Prisma.CitizenSkillCreateManySkillInputEnvelope
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
}

export type CitizenSkillUncheckedCreateNestedManyWithoutSkillInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput> | Prisma.CitizenSkillCreateWithoutSkillInput[] | Prisma.CitizenSkillUncheckedCreateWithoutSkillInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutSkillInput | Prisma.CitizenSkillCreateOrConnectWithoutSkillInput[]
  createMany?: Prisma.CitizenSkillCreateManySkillInputEnvelope
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
}

export type CitizenSkillUpdateManyWithoutSkillNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput> | Prisma.CitizenSkillCreateWithoutSkillInput[] | Prisma.CitizenSkillUncheckedCreateWithoutSkillInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutSkillInput | Prisma.CitizenSkillCreateOrConnectWithoutSkillInput[]
  upsert?: Prisma.CitizenSkillUpsertWithWhereUniqueWithoutSkillInput | Prisma.CitizenSkillUpsertWithWhereUniqueWithoutSkillInput[]
  createMany?: Prisma.CitizenSkillCreateManySkillInputEnvelope
  set?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  disconnect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  delete?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  update?: Prisma.CitizenSkillUpdateWithWhereUniqueWithoutSkillInput | Prisma.CitizenSkillUpdateWithWhereUniqueWithoutSkillInput[]
  updateMany?: Prisma.CitizenSkillUpdateManyWithWhereWithoutSkillInput | Prisma.CitizenSkillUpdateManyWithWhereWithoutSkillInput[]
  deleteMany?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
}

export type CitizenSkillUncheckedUpdateManyWithoutSkillNestedInput = {
  create?: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput> | Prisma.CitizenSkillCreateWithoutSkillInput[] | Prisma.CitizenSkillUncheckedCreateWithoutSkillInput[]
  connectOrCreate?: Prisma.CitizenSkillCreateOrConnectWithoutSkillInput | Prisma.CitizenSkillCreateOrConnectWithoutSkillInput[]
  upsert?: Prisma.CitizenSkillUpsertWithWhereUniqueWithoutSkillInput | Prisma.CitizenSkillUpsertWithWhereUniqueWithoutSkillInput[]
  createMany?: Prisma.CitizenSkillCreateManySkillInputEnvelope
  set?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  disconnect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  delete?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  connect?: Prisma.CitizenSkillWhereUniqueInput | Prisma.CitizenSkillWhereUniqueInput[]
  update?: Prisma.CitizenSkillUpdateWithWhereUniqueWithoutSkillInput | Prisma.CitizenSkillUpdateWithWhereUniqueWithoutSkillInput[]
  updateMany?: Prisma.CitizenSkillUpdateManyWithWhereWithoutSkillInput | Prisma.CitizenSkillUpdateManyWithWhereWithoutSkillInput[]
  deleteMany?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
}

export type EnumSkillLevelFieldUpdateOperationsInput = {
  set?: $Enums.SkillLevel
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type CitizenSkillCreateWithoutCitizenInput = {
  id?: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  skill: Prisma.SkillCreateNestedOneWithoutCitizensInput
}

export type CitizenSkillUncheckedCreateWithoutCitizenInput = {
  id?: string
  skillId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillCreateOrConnectWithoutCitizenInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput>
}

export type CitizenSkillCreateManyCitizenInputEnvelope = {
  data: Prisma.CitizenSkillCreateManyCitizenInput | Prisma.CitizenSkillCreateManyCitizenInput[]
  skipDuplicates?: boolean
}

export type CitizenSkillUpsertWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  update: Prisma.XOR<Prisma.CitizenSkillUpdateWithoutCitizenInput, Prisma.CitizenSkillUncheckedUpdateWithoutCitizenInput>
  create: Prisma.XOR<Prisma.CitizenSkillCreateWithoutCitizenInput, Prisma.CitizenSkillUncheckedCreateWithoutCitizenInput>
}

export type CitizenSkillUpdateWithWhereUniqueWithoutCitizenInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  data: Prisma.XOR<Prisma.CitizenSkillUpdateWithoutCitizenInput, Prisma.CitizenSkillUncheckedUpdateWithoutCitizenInput>
}

export type CitizenSkillUpdateManyWithWhereWithoutCitizenInput = {
  where: Prisma.CitizenSkillScalarWhereInput
  data: Prisma.XOR<Prisma.CitizenSkillUpdateManyMutationInput, Prisma.CitizenSkillUncheckedUpdateManyWithoutCitizenInput>
}

export type CitizenSkillScalarWhereInput = {
  AND?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
  OR?: Prisma.CitizenSkillScalarWhereInput[]
  NOT?: Prisma.CitizenSkillScalarWhereInput | Prisma.CitizenSkillScalarWhereInput[]
  id?: Prisma.StringFilter<"CitizenSkill"> | string
  citizenId?: Prisma.StringFilter<"CitizenSkill"> | string
  skillId?: Prisma.StringFilter<"CitizenSkill"> | string
  level?: Prisma.EnumSkillLevelFilter<"CitizenSkill"> | $Enums.SkillLevel
  yearsOfExp?: Prisma.IntNullableFilter<"CitizenSkill"> | number | null
  verified?: Prisma.BoolFilter<"CitizenSkill"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CitizenSkill"> | Date | string
}

export type CitizenSkillCreateWithoutSkillInput = {
  id?: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  citizen: Prisma.CitizenProfileCreateNestedOneWithoutSkillsInput
}

export type CitizenSkillUncheckedCreateWithoutSkillInput = {
  id?: string
  citizenId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillCreateOrConnectWithoutSkillInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  create: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput>
}

export type CitizenSkillCreateManySkillInputEnvelope = {
  data: Prisma.CitizenSkillCreateManySkillInput | Prisma.CitizenSkillCreateManySkillInput[]
  skipDuplicates?: boolean
}

export type CitizenSkillUpsertWithWhereUniqueWithoutSkillInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  update: Prisma.XOR<Prisma.CitizenSkillUpdateWithoutSkillInput, Prisma.CitizenSkillUncheckedUpdateWithoutSkillInput>
  create: Prisma.XOR<Prisma.CitizenSkillCreateWithoutSkillInput, Prisma.CitizenSkillUncheckedCreateWithoutSkillInput>
}

export type CitizenSkillUpdateWithWhereUniqueWithoutSkillInput = {
  where: Prisma.CitizenSkillWhereUniqueInput
  data: Prisma.XOR<Prisma.CitizenSkillUpdateWithoutSkillInput, Prisma.CitizenSkillUncheckedUpdateWithoutSkillInput>
}

export type CitizenSkillUpdateManyWithWhereWithoutSkillInput = {
  where: Prisma.CitizenSkillScalarWhereInput
  data: Prisma.XOR<Prisma.CitizenSkillUpdateManyMutationInput, Prisma.CitizenSkillUncheckedUpdateManyWithoutSkillInput>
}

export type CitizenSkillCreateManyCitizenInput = {
  id?: string
  skillId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skill?: Prisma.SkillUpdateOneRequiredWithoutCitizensNestedInput
}

export type CitizenSkillUncheckedUpdateWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skillId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillUncheckedUpdateManyWithoutCitizenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skillId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillCreateManySkillInput = {
  id?: string
  citizenId: string
  level: $Enums.SkillLevel
  yearsOfExp?: number | null
  verified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CitizenSkillUpdateWithoutSkillInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  citizen?: Prisma.CitizenProfileUpdateOneRequiredWithoutSkillsNestedInput
}

export type CitizenSkillUncheckedUpdateWithoutSkillInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CitizenSkillUncheckedUpdateManyWithoutSkillInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  citizenId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
  yearsOfExp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  verified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CitizenSkillSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  skillId?: boolean
  level?: boolean
  yearsOfExp?: boolean
  verified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenSkill"]>

export type CitizenSkillSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  skillId?: boolean
  level?: boolean
  yearsOfExp?: boolean
  verified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenSkill"]>

export type CitizenSkillSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  citizenId?: boolean
  skillId?: boolean
  level?: boolean
  yearsOfExp?: boolean
  verified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}, ExtArgs["result"]["citizenSkill"]>

export type CitizenSkillSelectScalar = {
  id?: boolean
  citizenId?: boolean
  skillId?: boolean
  level?: boolean
  yearsOfExp?: boolean
  verified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CitizenSkillOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "citizenId" | "skillId" | "level" | "yearsOfExp" | "verified" | "createdAt" | "updatedAt", ExtArgs["result"]["citizenSkill"]>
export type CitizenSkillInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}
export type CitizenSkillIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}
export type CitizenSkillIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  citizen?: boolean | Prisma.CitizenProfileDefaultArgs<ExtArgs>
  skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>
}

export type $CitizenSkillPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CitizenSkill"
  objects: {
    citizen: Prisma.$CitizenProfilePayload<ExtArgs>
    skill: Prisma.$SkillPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    citizenId: string
    skillId: string
    level: $Enums.SkillLevel
    yearsOfExp: number | null
    verified: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["citizenSkill"]>
  composites: {}
}

export type CitizenSkillGetPayload<S extends boolean | null | undefined | CitizenSkillDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload, S>

export type CitizenSkillCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CitizenSkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CitizenSkillCountAggregateInputType | true
  }

export interface CitizenSkillDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CitizenSkill'], meta: { name: 'CitizenSkill' } }
  /**
   * Find zero or one CitizenSkill that matches the filter.
   * @param {CitizenSkillFindUniqueArgs} args - Arguments to find a CitizenSkill
   * @example
   * // Get one CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CitizenSkillFindUniqueArgs>(args: Prisma.SelectSubset<T, CitizenSkillFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CitizenSkill that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CitizenSkillFindUniqueOrThrowArgs} args - Arguments to find a CitizenSkill
   * @example
   * // Get one CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CitizenSkillFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CitizenSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CitizenSkill that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillFindFirstArgs} args - Arguments to find a CitizenSkill
   * @example
   * // Get one CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CitizenSkillFindFirstArgs>(args?: Prisma.SelectSubset<T, CitizenSkillFindFirstArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CitizenSkill that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillFindFirstOrThrowArgs} args - Arguments to find a CitizenSkill
   * @example
   * // Get one CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CitizenSkillFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CitizenSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CitizenSkills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CitizenSkills
   * const citizenSkills = await prisma.citizenSkill.findMany()
   * 
   * // Get first 10 CitizenSkills
   * const citizenSkills = await prisma.citizenSkill.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const citizenSkillWithIdOnly = await prisma.citizenSkill.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CitizenSkillFindManyArgs>(args?: Prisma.SelectSubset<T, CitizenSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CitizenSkill.
   * @param {CitizenSkillCreateArgs} args - Arguments to create a CitizenSkill.
   * @example
   * // Create one CitizenSkill
   * const CitizenSkill = await prisma.citizenSkill.create({
   *   data: {
   *     // ... data to create a CitizenSkill
   *   }
   * })
   * 
   */
  create<T extends CitizenSkillCreateArgs>(args: Prisma.SelectSubset<T, CitizenSkillCreateArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CitizenSkills.
   * @param {CitizenSkillCreateManyArgs} args - Arguments to create many CitizenSkills.
   * @example
   * // Create many CitizenSkills
   * const citizenSkill = await prisma.citizenSkill.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CitizenSkillCreateManyArgs>(args?: Prisma.SelectSubset<T, CitizenSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CitizenSkills and returns the data saved in the database.
   * @param {CitizenSkillCreateManyAndReturnArgs} args - Arguments to create many CitizenSkills.
   * @example
   * // Create many CitizenSkills
   * const citizenSkill = await prisma.citizenSkill.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CitizenSkills and only return the `id`
   * const citizenSkillWithIdOnly = await prisma.citizenSkill.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CitizenSkillCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CitizenSkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CitizenSkill.
   * @param {CitizenSkillDeleteArgs} args - Arguments to delete one CitizenSkill.
   * @example
   * // Delete one CitizenSkill
   * const CitizenSkill = await prisma.citizenSkill.delete({
   *   where: {
   *     // ... filter to delete one CitizenSkill
   *   }
   * })
   * 
   */
  delete<T extends CitizenSkillDeleteArgs>(args: Prisma.SelectSubset<T, CitizenSkillDeleteArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CitizenSkill.
   * @param {CitizenSkillUpdateArgs} args - Arguments to update one CitizenSkill.
   * @example
   * // Update one CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CitizenSkillUpdateArgs>(args: Prisma.SelectSubset<T, CitizenSkillUpdateArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CitizenSkills.
   * @param {CitizenSkillDeleteManyArgs} args - Arguments to filter CitizenSkills to delete.
   * @example
   * // Delete a few CitizenSkills
   * const { count } = await prisma.citizenSkill.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CitizenSkillDeleteManyArgs>(args?: Prisma.SelectSubset<T, CitizenSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CitizenSkills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CitizenSkills
   * const citizenSkill = await prisma.citizenSkill.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CitizenSkillUpdateManyArgs>(args: Prisma.SelectSubset<T, CitizenSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CitizenSkills and returns the data updated in the database.
   * @param {CitizenSkillUpdateManyAndReturnArgs} args - Arguments to update many CitizenSkills.
   * @example
   * // Update many CitizenSkills
   * const citizenSkill = await prisma.citizenSkill.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CitizenSkills and only return the `id`
   * const citizenSkillWithIdOnly = await prisma.citizenSkill.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CitizenSkillUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CitizenSkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CitizenSkill.
   * @param {CitizenSkillUpsertArgs} args - Arguments to update or create a CitizenSkill.
   * @example
   * // Update or create a CitizenSkill
   * const citizenSkill = await prisma.citizenSkill.upsert({
   *   create: {
   *     // ... data to create a CitizenSkill
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CitizenSkill we want to update
   *   }
   * })
   */
  upsert<T extends CitizenSkillUpsertArgs>(args: Prisma.SelectSubset<T, CitizenSkillUpsertArgs<ExtArgs>>): Prisma.Prisma__CitizenSkillClient<runtime.Types.Result.GetResult<Prisma.$CitizenSkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CitizenSkills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillCountArgs} args - Arguments to filter CitizenSkills to count.
   * @example
   * // Count the number of CitizenSkills
   * const count = await prisma.citizenSkill.count({
   *   where: {
   *     // ... the filter for the CitizenSkills we want to count
   *   }
   * })
  **/
  count<T extends CitizenSkillCountArgs>(
    args?: Prisma.Subset<T, CitizenSkillCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CitizenSkillCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CitizenSkill.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CitizenSkillAggregateArgs>(args: Prisma.Subset<T, CitizenSkillAggregateArgs>): Prisma.PrismaPromise<GetCitizenSkillAggregateType<T>>

  /**
   * Group by CitizenSkill.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CitizenSkillGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CitizenSkillGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CitizenSkillGroupByArgs['orderBy'] }
      : { orderBy?: CitizenSkillGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CitizenSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitizenSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CitizenSkill model
 */
readonly fields: CitizenSkillFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CitizenSkill.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CitizenSkillClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  citizen<T extends Prisma.CitizenProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CitizenProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__CitizenProfileClient<runtime.Types.Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  skill<T extends Prisma.SkillDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SkillDefaultArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CitizenSkill model
 */
export interface CitizenSkillFieldRefs {
  readonly id: Prisma.FieldRef<"CitizenSkill", 'String'>
  readonly citizenId: Prisma.FieldRef<"CitizenSkill", 'String'>
  readonly skillId: Prisma.FieldRef<"CitizenSkill", 'String'>
  readonly level: Prisma.FieldRef<"CitizenSkill", 'SkillLevel'>
  readonly yearsOfExp: Prisma.FieldRef<"CitizenSkill", 'Int'>
  readonly verified: Prisma.FieldRef<"CitizenSkill", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"CitizenSkill", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CitizenSkill", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CitizenSkill findUnique
 */
export type CitizenSkillFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter, which CitizenSkill to fetch.
   */
  where: Prisma.CitizenSkillWhereUniqueInput
}

/**
 * CitizenSkill findUniqueOrThrow
 */
export type CitizenSkillFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter, which CitizenSkill to fetch.
   */
  where: Prisma.CitizenSkillWhereUniqueInput
}

/**
 * CitizenSkill findFirst
 */
export type CitizenSkillFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter, which CitizenSkill to fetch.
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenSkills to fetch.
   */
  orderBy?: Prisma.CitizenSkillOrderByWithRelationInput | Prisma.CitizenSkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CitizenSkills.
   */
  cursor?: Prisma.CitizenSkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenSkills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenSkills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CitizenSkills.
   */
  distinct?: Prisma.CitizenSkillScalarFieldEnum | Prisma.CitizenSkillScalarFieldEnum[]
}

/**
 * CitizenSkill findFirstOrThrow
 */
export type CitizenSkillFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter, which CitizenSkill to fetch.
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenSkills to fetch.
   */
  orderBy?: Prisma.CitizenSkillOrderByWithRelationInput | Prisma.CitizenSkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CitizenSkills.
   */
  cursor?: Prisma.CitizenSkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenSkills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenSkills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CitizenSkills.
   */
  distinct?: Prisma.CitizenSkillScalarFieldEnum | Prisma.CitizenSkillScalarFieldEnum[]
}

/**
 * CitizenSkill findMany
 */
export type CitizenSkillFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter, which CitizenSkills to fetch.
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CitizenSkills to fetch.
   */
  orderBy?: Prisma.CitizenSkillOrderByWithRelationInput | Prisma.CitizenSkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CitizenSkills.
   */
  cursor?: Prisma.CitizenSkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CitizenSkills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CitizenSkills.
   */
  skip?: number
  distinct?: Prisma.CitizenSkillScalarFieldEnum | Prisma.CitizenSkillScalarFieldEnum[]
}

/**
 * CitizenSkill create
 */
export type CitizenSkillCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * The data needed to create a CitizenSkill.
   */
  data: Prisma.XOR<Prisma.CitizenSkillCreateInput, Prisma.CitizenSkillUncheckedCreateInput>
}

/**
 * CitizenSkill createMany
 */
export type CitizenSkillCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CitizenSkills.
   */
  data: Prisma.CitizenSkillCreateManyInput | Prisma.CitizenSkillCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CitizenSkill createManyAndReturn
 */
export type CitizenSkillCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * The data used to create many CitizenSkills.
   */
  data: Prisma.CitizenSkillCreateManyInput | Prisma.CitizenSkillCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CitizenSkill update
 */
export type CitizenSkillUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * The data needed to update a CitizenSkill.
   */
  data: Prisma.XOR<Prisma.CitizenSkillUpdateInput, Prisma.CitizenSkillUncheckedUpdateInput>
  /**
   * Choose, which CitizenSkill to update.
   */
  where: Prisma.CitizenSkillWhereUniqueInput
}

/**
 * CitizenSkill updateMany
 */
export type CitizenSkillUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CitizenSkills.
   */
  data: Prisma.XOR<Prisma.CitizenSkillUpdateManyMutationInput, Prisma.CitizenSkillUncheckedUpdateManyInput>
  /**
   * Filter which CitizenSkills to update
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * Limit how many CitizenSkills to update.
   */
  limit?: number
}

/**
 * CitizenSkill updateManyAndReturn
 */
export type CitizenSkillUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * The data used to update CitizenSkills.
   */
  data: Prisma.XOR<Prisma.CitizenSkillUpdateManyMutationInput, Prisma.CitizenSkillUncheckedUpdateManyInput>
  /**
   * Filter which CitizenSkills to update
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * Limit how many CitizenSkills to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CitizenSkill upsert
 */
export type CitizenSkillUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * The filter to search for the CitizenSkill to update in case it exists.
   */
  where: Prisma.CitizenSkillWhereUniqueInput
  /**
   * In case the CitizenSkill found by the `where` argument doesn't exist, create a new CitizenSkill with this data.
   */
  create: Prisma.XOR<Prisma.CitizenSkillCreateInput, Prisma.CitizenSkillUncheckedCreateInput>
  /**
   * In case the CitizenSkill was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CitizenSkillUpdateInput, Prisma.CitizenSkillUncheckedUpdateInput>
}

/**
 * CitizenSkill delete
 */
export type CitizenSkillDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
  /**
   * Filter which CitizenSkill to delete.
   */
  where: Prisma.CitizenSkillWhereUniqueInput
}

/**
 * CitizenSkill deleteMany
 */
export type CitizenSkillDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CitizenSkills to delete
   */
  where?: Prisma.CitizenSkillWhereInput
  /**
   * Limit how many CitizenSkills to delete.
   */
  limit?: number
}

/**
 * CitizenSkill without action
 */
export type CitizenSkillDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CitizenSkill
   */
  select?: Prisma.CitizenSkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CitizenSkill
   */
  omit?: Prisma.CitizenSkillOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CitizenSkillInclude<ExtArgs> | null
}
